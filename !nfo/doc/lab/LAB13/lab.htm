<!doctype html>
<HTML lang="ru">                                     
<HEAD>
<meta charset="utf-8">
<TITLE>Лабораторная работа 13: Разработка графического интерфейса</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../heads.css">                               
<STYLE>TH,TD{font-size:5.5mm;border:1 double blue}</STYLE>
</HEAD>
<BODY>
<H1> ЛАБОРАТОРНАЯ РАБОТА №13</H1>
<H2> <SPAN CLASS="beg">Тема: </SPAN>Разработка графического интерфейса</H2>
<H2> <SPAN CLASS="beg">Цель: </SPAN>
Рассмотрение способов создания классов, объектов и их использования </H2>
<A NAME="beg"></A>
<H3>ОГЛАВЛЕНИЕ</H3> 
<A CLASS="com" HREF="#1">1 Пользовательский графический интерфейс<BR>             
<A CLASS="com" HREF="#1.1">1.1 Создание окна<BR>
<A CLASS="com" HREF="#1.2">1.2 Общие свойства и методы виджетов<BR>
<A CLASS="com" HREF="#1.3">1.3 Системные методы<BR>
<A CLASS="com" HREF="#1.4">1.4 Основные виджеты<BR>
<A CLASS="com" HREF="#1.5">1.5 Упаковщики<BR>
<A CLASS="com" HREF="#1.6">1.6 Привязка событий<BR>
<A CLASS="com" HREF="#2">2 Разработка графического интерфейса<BR>
<A CLASS="com" HREF="#2">2.1 Создание окна, рамки и кнопок <BR>
<A CLASS="com" HREF="#2.2">2.2 Обработка событий<BR>
<A CLASS="com" HREF="#2.3">2.3 Работа с текстом<BR>
<A CLASS="com" HREF="#2.4">2.4 Использование флажков<BR>
<A CLASS="com" HREF="#2.5">2.5 Использование переключателей<BR>
<A CLASS="com" HREF="#ind">Индивидуальные задания<BR>

<A NAME="1"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4>1 Пользовательский графический интерфейс</H4>
<P> Графический пользовательский интерфейс GUI (Graphical User Interface) &ndash; это разновидность
пользовательского интерфейса, в котором элементы интерфейса (меню, кнопки, значки, списки и т. п.),
представленные пользователю на дисплее, исполнены в виде графических изображений. В отличие от
интерфейса командной строки (типа старого DOS системы  Windows), в GUI пользователь имеет свободный
доступ ко всем элементам интерфейса экрана и может ими управлять с помощью клавиатуры или мыши.<BR>
<SPAN CLASS="txt_abz">Библиотека tkinter </SPAN>(от англ. Tk interface) &ndash; это встроенная
графическая библиотека на основе средств Tk, широко распространенная в мире GNU/Linux и других
UNIX-подобных систем, которая портирована (переведена), в частности, на Microsoft Windows и Apple
Mac OS). Tk (от англ. Toolkit &ndash; «набор  инструментов», «инструментарий») &ndash;
кроссплатформенная библиотека базовых элементов графического интерфейса, распространяемая с
открытыми исходными текстами.<BR>
<SPAN CLASS="txt_abz">Библиотека </SPAN>tkinter входит в стандартный дистрибутив языка Python (до
версии Python 3.0 именовалась Tkinter). В tkinter стандартизированные компоненты графического
интерфейса, с которыми взаимодействует пользователь, называются виджетами (widget, от англ. window
gadget). 
<A NAME="1.1"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.1 Создание окна</H4>
<P>Для подключения модуля <SPAN CLASS="svoj">tkinter</SPAN> используется форма<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#ff8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN>,<BR><BR>
позволяющая использовать все имена модуля без указания префикса <SPAN CLASS="svoj">tkinter</SPAN>.<BR>
<SPAN CLASS="txt_abz"><SPAN CLASS="svoj">Tk()</SPAN></SPAN> является базовым классом любого
<SPAN CLASS="svoj">tkinter</SPAN> приложения. При создании объекта этого класса запускается
интерпретатор <SPAN CLASS="svoj">tcl/tk</SPAN> и создается виджетами наивысшего уровня. Обычно им
является основное окно приложения. tkinter является событийно-ориентированной библиотекой. В
приложениях такого типа имеется главный цикл обработки событий. В tkinter такой цикл запускается
методом <SPAN CLASS="svoj">mainloop()</SPAN>. Для явного выхода из интерпретатора и завершения
цикла обработки событий используется метод <SPAN CLASS="svoj">quit()</SPAN>.<BR>
<SPAN CLASS="txt_abz">Таким </SPAN>образом минимальное приложение на Tkinter будет таким:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#ff8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root = Tk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root.mainloop()</SPAN><BR>
<A NAME="1.2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.2 Общие свойства и методы виджетов</H4>
<P>Все виджеты в Tkinter обладают некоторыми общими свойствами. Опишем их, перед тем как перейти к
рассмотрению конкретных виджетов. Виджеты создаются вызовом конструктора соответствующего класса.
Первый аргумент (как правило неименованный, но можно использовать имя master) &ndash; это
родительский виджет, в который будет помещен (упакован) текущий виджет. Родительский виджет можно
не указывать, в таком случае будет использовано главное окно приложения. Далее следуют именованные
аргументы, конфигурирующие виджет.<BR>
<SPAN CLASS="txt_abz">Виджеты </SPAN>обладают следующими методами:
<UL CLASS="list">                                           
<LI>&nbsp;configure() или config() &ndash; используются для конфигурирования (задания параметров)
виджетов во время исполнения программы (хотя виджеты могут быть сконфигурированы во время создания). 
Параметры конфигурирования также могут быть заданы как значения ключей словаря виджета;
<LI>&nbsp;cget() &ndash; является обратным методу config() &ndash; предназначен для получения
информации о конфигурации виджета;
<LI>&nbsp;destroy &ndash; уничтожает виджет и всех его потомков. Если необходимо только на время
спрятать какой-либо виджет, то лучше пользоваться упаковщиком grid() и методом grid_remove() (это
позволяет сохранять взаимное расположение виджетов);
<LI>&nbsp;Методы семейства grab_ предназначены для управления потоком события. Виджет, захвативший
поток будет получать все события окна или приложения:
<UL CLASS="list2">                                           
<LI> grab_set &ndash; передать поток данному виджету;
<LI> grab_set_global &ndash; передать глобальный поток данному виджету. В этом случае все события
на дисплее будут передаваться этому виджету. Следует пользоваться очень осторожно, т.к. остальные
виджеты всех приложений не будут получать события;
<LI>grab_release &ndash; освободить поток;
<LI>grab_status - узнать текущий статус потока событий для виджета. Возможные значения: None,
"local" или "global";
<LI> grab_current &ndash; получить виджет, который получает поток;
</UL>
<LI>&nbsp;Методы семейства focus_ используются для управления фокусом ввода с клавиатуры. Виджет,
имеющий фокус, получает все события с клавиатуры:
<UL CLASS="list2">                                           
<LI> focus (синоним focus_set) &ndash; передать фокус виджету;
<LI> focus_force &ndash; передать фокус, даже если приложение не имеет фокуса. Используйте
осторожно, поскольку это может раздражать пользователей;
<LI> focus_get &ndash; возвращает виджет, на который направлен фокус, либо None, если такой
отсутствует;
<LI> focus_displayof &ndash; возвращает виджет, на который направлен фокус на том дисплее, на
котором размещен виджет, либо None, если такой отсутствует;
<LI> focus_lastfor &ndash; возвращает виджет, на который будет направлен фокус, когда окно с этим
виджетом получит фокус;
<LI> tk_focusNext &ndash; возвращает виджет, который получит фокус следующим (обычно смена фокуса
происходит при нажатии клавиши Tab). Порядок следования определяется последовательностью упаковки
виджетов;
<LI> tk_focusPrev &ndash; то же, что и focusNext, но в обратном порядке;
<LI>tk_focusFollowsMouse &ndash; устанавливает, что виджет будет получать фокус при наведении на
него мышки. Вернуть нормальное поведение достаточно сложно.
</UL>
</UL>
<A NAME="1.3"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.3 Системные методы</H4>
<P>Эти методы не являются виджет-специфичными, т.е. хотя они являются методами виджетов они влияют
на работу интерпретатора tcl/tk:
<UL CLASS="list">                                           
<LI>&nbsp; after, after_idle и after_cancel &ndash; таймеры, с помощью этих методов можно отложить
выполнение какого-нибудь кода на определенное время:
<UL CLASS="list2">                                           
<LI> after &ndash; принимает два аргумента: время в миллисекундах и функцию, которую надо выполнить
через указанное время. Возвращает идентификатор, который может быть использован в after_cancel;
<LI> after_idle &ndash; принимает один аргумент: функцию, которая будет выполнена после завершения
всех отложенных операций (после того, как будут обработаны все события). Возвращает идентификатор,
который может быть использован в after_cancel;
<LI>after_cancel &ndash; принимает один аргумент: идентификатор задачи, полученный предыдущими
функциями, и отменяет это задание;
</UL>
<LI>&nbsp; update и update_idletasks &ndash; функции для работы с очередью задач. Их выполнение
вызывает обработку отложенных задач:
<UL CLASS="list2">                                           
<LI> update_idletasks &ndash; выполняет задачи, обычно откладываемые "на потом", когда приложение
будет простаивать. Это приводит к прорисовке всех виджетов, расчету их расположения и т.д. Обычно
эта функция используется если были внесены изменения в состояние приложения, и необходимо, чтобы
эти изменения были отображены на экране немедленно, не дожидаясь завершения сценария;
<LI> update &ndash; обрабатывает все задачи, стоящие в очереди. Обычно эта функция используется во
время "тяжёлых" расчетов, когда необходимо чтобы приложение оставалось отзывчивым на действия
пользователя;
</UL>
<LI> eval и evalfile &ndash; недокументированные функции для выполнения кода на tcl. eval
позволяет выполнить строку на языке программирования tcl, а evalfile - выполнить код, записанный в
файл.
В качестве аргументов принимают соответственно строку и путь к файлу. Данные функции полезны при
использовании дополнительных модулей, написанных на tcl. 
</UL>
<A NAME="1.4"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.4 Основные виджеты</H4>
<P>К основным виджетам можно отнести:
<UL CLASS="list">                                           
<LI> Toplevel &ndash; окно верхнего уровня. Обычно используется для создания многоконных
программ, а также для диалоговых окон. Имеет следующие методы:
<UL CLASS="list2">
<LI> title() &ndash; заголовок окна;
<LI> overrideredirect &ndash; указание оконному менеджеру игнорировать это окно. Аргументом
является True или False. В случае, если аргумент не указан &ndash; получаем текущее значение. Если
аргумент равен True, то такое окно будет показано оконным менеджером без обрамления (без заголовка
и бордюра). Может быть использовано, например, для создания splashscreen при старте программы;
<LI> iconify() / deiconify() &ndash; свернуть / развернуть окно;
<LI> withdraw() &ndash; "спрятать" (сделать невидимым) окно. Для того, чтобы снова показать его
надо использовать метод deiconify();
<LI>minsize() и maxsize() &ndash; минимальный / максимальный размер окна. Методы принимают два
аргумента &ndash; ширина и высота окна. Если аргументы не указаны - возвращают текущее значение
<LI> state() &ndash; получить текущее значение состояния окна. Может возвращать следующие значения:
normal (нормальное состояние), icon (показано в виде иконки), iconic (свернуто), withdrawn
(не показано), zoomed (развернуто на полный экран, только для Windows и Mac OS X);
<LI> resizable() &ndash; может ли пользователь изменять размер окна. Принимает два аргумента &ndash;
возможность изменения размера по горизонтали и по вертикали. Без аргументов возвращает текущее
значение;
<LI> geometry() &ndash; устанавливает геометрию окна в формате ширинаxвысота+x+y (пример:
geometry("600x400+40+80") &ndash; поместить окно в точку с координатам 40,80 и установить размер в
600x400). Размер или координаты могут быть опущены (geometry("600x400") &ndash; только изменить
размер, geometry("+40+80") - только переместить окно);
<LI> transient() &ndash; сделать окно зависимым от другого окна, указанного в аргументе. Будет
сворачиваться вместе с указанным окном. Без аргументов возвращает текущее значение;
<LI> protocol() &ndash; получает два аргумента: название события и функцию, которая будет
вызываться при наступлении указанного события. События могут называться WM_TAKE_FOCUS (получение
фокуса), WM_SAVE_YOURSELF (необходимо сохраниться, в настоящий момент является устаревшим),
WM_DELETE_WINDOW (удаление окна);
<LI> tkraise() (синоним lift()) и lower() &ndash; поднимает (размещает поверх всех других окон) или
опускает окно. Методы могут принимать один необязательный аргумент: над/под каким окном разместить
текущее;
<LI> grab_set() &ndash; устанавливает фокус на окно, даже при наличии открытых других окон;
<LI>grab_release() &ndash; снимает монопольное владение фокусом ввода с окна;
</UL>
Эти же методы могут быть использованы для корневого (root) окна.
<LI>&nbsp; Button &ndash; обыкновенная кнопка, основными свойствами которой являются:
<UL CLASS="list2">
<LI> text &ndash; текст, отображенный на кнопке;
<LI> width, height &ndash; соответственно, ширина и высота кнопки;
<LI> bg &ndash; цвет кнопки (сокращенно от background);
<LI> fg &ndash; цвет текста на кнопке (сокращенно от foreground);
<LI> font &ndash; шрифт и его размер;
</UL>
<LI>&nbsp; Label &ndash; это виджет, предназначенный для отображения какой-либо надписи без
возможности редактирования пользователем. Имеет те же свойства, что и перечисленные свойства
кнопки;
<LI>&nbsp; Entry &ndash; это виджет, позволяющий пользователю ввести (или вывести с помощью метода
insert()) одну строку текста. Имеет дополнительное свойство bd (сокращенно от borderwidth),
позволяющее регулировать ширину границы:
<UL CLASS="list2">
<LI>  borderwidth &ndash; ширина бордюра элемента ( bd - сокращение от borderwidth);
<LI>  width &ndash; задает длину элемента в знакоместах;
</UL>
<LI> Text &ndash; это виджет, который позволяет пользователю ввести (или вывести с помощью
метода insert()) многострочный текст. Имеет дополнительное свойство wrap, отвечающее за перенос
(чтобы, например, переносить по словам, нужно использовать значение WORD;
<LI> Listbox &ndash; это виджет, который представляет из себя список, из элементов которого
пользователь может выбирать один или несколько пунктов. Имеет дополнительное свойство selectmode,
которое, при значении SINGLE, позволяет пользователю выбрать только один элемент списка, а при
значении EXTENDED &ndash; любое количество;
<LI> Frame (рамка) &ndash; предназначен для организации виджетов внутри окна;
<LI> Checkbutton &ndash; это виджет, который позволяет отметить „галочкой“ определенный пункт
в окне. При использовании нескольких пунктов нужно каждому присвоить свою переменную;
<LI> Radiobutton выполняет функцию, схожую с функцией виджета Checkbutton. Разница в том,
что в виджете Radiobutton пользователь может выбрать лишь один из пунктов. Реализация этого виджета
несколько иная, чем виджета Checkbutton. В этом виджете используется уже одна переменная. В
зависимости от того, какой пункт выбран, она меняет свое значение. Самое интересное, что если
присвоить этой переменной какое-либо значение, поменяется и выбранный виджет;
<LI> Scale (шкала) &ndash; это виджет, позволяющий выбрать какое-либо значение из заданного
диапазона. Имеет свойства:
<UL CLASS="list2">
<LI> orient &ndash; как расположена шкала на окне. Возможные значения: HORIZONTAL, VERTICAL
(горизонтально, вертикально);
<LI> length &ndash; длина шкалы;
<LI> from_ &ndash; с какого значения начинается шкала;
<LI> to &ndash; каким значением заканчивается шкала;
<LI> tickinterval &ndash; интервал, через который отображаются метки шкалы;
<LI> resolution &ndash; шаг передвижения (минимальная длина, на которую можно передвинуть движок);
</UL>
<LI> Scrollbar &ndash; дает возможность пользователю "прокрутить" другой виджет (например
текстовое поле) и часто бывает полезен. Использование этого виджета достаточно нетривиально.
Необходимо сделать две привязки: command полосы прокрутки привязываем к методу xview/yview виджета,
а xscrollcommand/yscrollcommand виджета привязываем к методу set полосы прокрутки.
</UL>
<A NAME="1.5"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>
            
<H4 CLASS="pod">1.5 Упаковщики</H4>
<P>Упаковщик (менеджер геометрии, менеджер расположения) &ndash; это специальный механизм, который
размещает (упаковывает) виджеты на окне. В tkinter есть три упаковщика: <SPAN CLASS="svoj">pack()</SPAN>,
<SPAN CLASS="svoj">place()</SPAN> и <SPAN CLASS="svoj">grid()</SPAN>.
Обратите внимание, что в одном виджете можно использовать только один тип упаковки, при смешивании
разных типов упаковки программа, скорее всего, не будет работать. Разберем каждый из них по порядку:
<UL CLASS="list">                                           
<LI> pack() &ndash; имеет максимальные функциональные возможности. При его применении можно
указать следующие аргументы:
<UL CLASS="list2">
<LI> side ("left"/"right"/"top"/"bottom") &ndash; к какой стороне должен примыкать размещаемый
виджет;
<LI> fill (None/"x"/"y"/"both") &ndash; необходимо ли расширять пространство предоставляемое
виджету;
<LI> expand (True/False) &ndash; необходимо ли расширять сам виджет, чтобы он занял все
предоставляемое ему пространство;
<LI> in_ &ndash; явное указание в какой родительский виджет должен быть помещен;
</UL>
Кроме основной функции у виджетов есть дополнительные методы для работы с упаковщиками:
<UL CLASS="list2">
<LI> pack_configure() &ndash; синоним для pack();
<LI> pack_slaves() (синоним slaves()) &ndash; возвращает список всех дочерних упакованных виджетов
<LI> pack_info &ndash; возвращает информацию о конфигурации упаковки;
<LI> pack_propagate() (синоним propagate()) (True/False) &ndash; включает/отключает распространении
информации о геометрии дочерних виджетов. По умолчанию виджет изменяет свой размер в соответствии
с размером своих потомков. Этот метод может отключить такое поведение (pack_propagate(False)).
Это может быть полезно, если необходимо, чтобы виджет имел фиксированный размер и не изменял его по
прихоти потомков;
<LI> pack_forget() (синоним forget()) - удаляет виджет и всю информацию о его расположении из
упаковщика. Позднее этот виджет может быть снова размещен;
</UL>
<LI> grid() &ndash; упаковщик представляет собой таблицу с ячейками, в которые помещаются
виджеты. Имеет следующие аргументы:
<UL CLASS="list2">
<LI> row &ndash; номер строки, в который помещаем виджет;
<LI> rowspan &ndash; сколько строк занимает виджет;
<LI> column &ndash; номер столбца, в который помещаем виджет;
<LI> columnspan &ndash; сколько столбцов занимает виджет;
<LI> padx / pady &ndash; размер внешней границы (бордюра) по горизонтали и вертикали;
<LI> ipadx / ipady &ndash; размер внутренней границы (бордюра) по горизонтали и вертикали. Разница
между pad и ipad в том, что при указании pad расширяется свободное пространство, а при ipad
расширяется помещаемый виджет;
<LI> sticky ("n", "s", "e", "w" или их комбинация) &ndash; указывает к какой границе "приклеивать"
виджет. Позволяет расширять виджет в указанном направлении. Границы названы в соответствии со
сторонами света. "n" (север) &ndash; верхняя граница, "s" (юг) &ndash; нижняя, "w" (запад) &ndash;
левая, "e" (восток) &ndash; правая;
<LI> in_ &ndash; явное указание в какой родительский виджет должен быть помещен;
</UL>
Для каждого виджета указываем, в какой он находится строке, и в каком столбце. Если нужно,
указываем, сколько ячеек он занимает (если, например, нам нужно разместить три виджета под одним,
необходимо "растянуть" верхний на три ячейки). 
<LI> Дополнительные функции:
<UL CLASS="list2">
<LI> grid_configure() &ndash; синоним для grid();
<LI> grid_slaves() (синоним slaves()) &ndash; см. pack_slaves();
<LI> grid_info() &ndash; см. pack_info();
<LI> grid_propagate() (синоним propagate()) &ndash; см. pack_propagate();
<LI> grid_forget() (синоним forget()) &ndash; см. pack_forget();
<LI> grid_remove() &ndash; удаляет виджет из-под управления упаковщиком, но сохраняет информацию 
об упаковке. Этот метод удобно использовать для временного удаления виджета;
<LI> grid_bbox() (синоним bbox()) &ndash; возвращает координаты (в пикселях) указанных столбцов и
строк;
<LI> grid_location() (синоним location()) &ndash; принимает два аргумента: x и y (в пикселях).
Возвращает номер строки и столбца в которые попадают указанные координаты, либо -1 если координаты
попали вне виджета;
<LI> grid_columnconfigure() (синоним columnconfigure()) и grid_rowconfigure() (синоним
rowconfigure()) &ndash; важные функции для конфигурирования упаковщика. Методы принимают номер
строки/столбца и аргументы конфигурации. Список возможных аргументов:<BR> 
<SPAN CLASS="txt_abz">minsize </SPAN>&ndash; минимальная ширина/высота строки/столбца;  weight
&ndash; "вес" строки/столбца при увеличении размера виджета. 0 означает, что строка/столбец не
будет расширяться. Строка/столбец с "весом" равным 2 будет расширяться вдвое быстрее, чем с
весом 1;<BR>
<SPAN CLASS="txt_abz">uniform </SPAN>&ndash; объединение строк/столбцов в группы. Строки/столбцы
имеющие одинаковый параметр uniform будут расширяться строго в соответствии со своим весом;<BR>
<SPAN CLASS="txt_abz">pad </SPAN>&ndash; размер бордюра. Указывает, сколько пространства будет
добавлено к самому большому виджету в строке/столбце;
</UL>
<LI> place представляет собой простой упаковщик, позволяющий размещать виджет в фиксированном
месте с фиксированным размером. Также он позволяет ука	зывать координаты размещения в
относительных единицах для реализации "резинового" размещения. При использовании этого упаковщика,
необходимо указывать координаты каждого виджета. Имеет аргументы:
<UL CLASS="list2">
<LI> anchor ("n", "s", "e", "w", "ne", "nw", "se", "sw" или "center") &ndash; какой угол или
какая сторона размещаемого виджета будет указана в аргументах x/y/relx/rely. По умолчанию "nw"
&ndash; левый верхний угол; 
<LI> bordermode ("inside", "outside", "ignore") &ndash; определяет в какой степени будут
учитываться границы при размещении виджета;
<LI> in_ &ndash; явное указание в какой родительский виджет должен быть помещен;
<LI> x и y &ndash; абсолютные координаты (в пикселях) размещения виджета;
<LI> width и height &ndash; абсолютные ширина и высота виджета;
<LI> relx и rely &ndash; относительные координаты (от 0.0 до 1.0) размещения виджета;
<LI> relwidth и relheight &ndash; относительные ширина и высота виджета;
<LI> Дополнительные функции:
<UL CLASS="list2">
<LI> place_slaves(), place_forget(), place_info() &ndash; см. описание аналогичных методов
упаковщика pack;
</UL>
<LI>
</UL>
Относительные и абсолютные координаты (а также ширину и высоту) можно комбинировать. Так например,
relx=0.5, x=-2 означает размещение виджета в двух пикселях слева от центра родительского виджета,
relheight=1.0, height=-2 &ndash; высота виджета на два пикселя меньше высоты родительского виджета;
</UL>
<A NAME="1.6"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.6 Привязка событий</H4>
<P>Для большинства виджетов, реагирующих на действие пользователя, активацию виджета (например,
нажатие кнопки) можно привязать к функции обработчику этого события, используя опцию command.
К таким виджетам относятся: Button, Checkbutton, Radiobutton, Spinbox, Scrollbar, Scale.
Например: <SPAN CLASS="svoj">button = Button(command=callback)</SPAN>. Такой способ является
предпочтительным и наиболее удобным способом привязки.<BR>
<SPAN CLASS="txt_abz">Другим </SPAN>способом привязки является использование метода
<SPAN CLASS="svoj">bind()</SPAN>, который привязывает событие к какому-либо действию (нажатие
кнопки мыши, нажатие клавиши на клавиатуре и т.д.). <SPAN CLASS="svoj">bind()</SPAN> принимает три
аргумента:
<UL CLASS="list">                                           
<LI> название события;
<LI> функцию, которая будет вызвана при наступлении события;
<LI> третий аргумент (необязательный) &ndash; строка "+" &ndash; означает, что эта привязка
добавляется к уже существующим. Если третий аргумент опущен или равен пустой строке &ndash;
привязка замещает все другие привязки данного события к виджету. 
</UL>
<P> Метод <SPAN CLASS="svoj">bind()</SPAN> возвращает идентификатор привязки, который может быть
использован в функции <SPAN CLASS="svoj">unbind()</SPAN>. Обратите внимание, что если
<SPAN CLASS="svoj">bind()</SPAN> привязан к окну верхнего уровня, то Tkinter будет обрабатывать
события всех виджетов этого окна (см. также <SPAN CLASS="svoj">bind_all()</SPAN> ниже).<BR>
<SPAN CLASS="txt_abz">Функция, </SPAN>которая вызывается при наступлении события, должна принимать
один аргумент &ndash; это объект класса <SPAN CLASS="svoj">Event()</SPAN>, в котором описано
наступившее событие. Объект класса <SPAN CLASS="svoj">Event()</SPAN> имеет следующие атрибуты
(в скобках указаны события, для которых этот атрибут установлен):
<UL CLASS="list">                                           
<LI> serial &ndash; серийный номер события (все события);
<LI> num &ndash; номер кнопки мыши (ButtonPress, ButtonRelease);
<LI> focus &ndash; имеет ли окно фокус (Enter, Leave);
<LI> height и width &ndash; ширина и высота окна (Configure, Expose);
<LI> keycode &ndash; код нажатой клавиши (KeyPress, KeyRelease);
<LI> state &ndash; состояние события (для ButtonPress, ButtonRelease, Enter, KeyPress,
КeyRelease, Leave, Motion &ndash; в виде числа); для Visibility &ndash; в виде строки);
<LI> time &ndash; время наступления события (все события); 
<LI> x и y &ndash; координаты мыши;
<LI> x_root и y_root &ndash; координаты мыши на экране (ButtonPress, ButtonRelease, KeyPress,
KeyRelease, Motion);
<LI> char &ndash; набранный на клавиатуре символ (KeyPress, KeyRelease);
<LI> send_event &ndash; см. документацию по X/Windows;
<LI> keysym &ndash; набранный на клавиатуре символ (KeyPress, KeyRelease);
<LI> keysym_num &ndash; набранный на клавиатуре символ в виде числа (KeyPress, KeyRelease);
<LI> type &ndash; тип события в виде числа (все события);
<LI> widget &ndash; виджет, который получил событие (все события);
<LI> delta &ndash; изменение при вращении колеса мыши (MouseWheel).
</UL>
<P>Эта функция может возвращать строки "continue" и "break". Если функция возвращает "continue" то
Tkinter продолжит обработку других привязок этого события, если "break" - обработка этого события
прекращается. Если функция ничего не возвращает (возвращает None), то обработка событий
продолжается (т.е. это эквивалентно возвращению "continue").<BR>
<SPAN CLASS="txt_abz">Есть </SPAN>три формы названия событий. Самый простой случай это символ
ASCII. Так описываются события нажатия клавиш на клавиатуре: 
<SPAN CLASS="svoj">widget.bind("z", callback)</SPAN>. <SPAN CLASS="svoj">callback</SPAN>
вызывается каждый раз, когда будет нажата клавиша "z".<BR>
<SPAN CLASS="txt_abz">Второй </SPAN>способ длиннее, но позволяет описать больше событий. Он имеет
следующий синтаксис: <SPAN CLASS="svoj">&lt;modifier-modifier-type-detail></SPAN>. Название события
заключено в угловые скобки. Внутри имеются ноль или более модификаторов, тип события и
дополнительная информация (номер нажатой клавиши мыши или символ клавиатуры). Поля разделяются
дефисом или пробелом. Приведем пример одновременного нажатия Ctrl+Shift+q:
<SPAN CLASS="svoj">widget.bind("<Control-Shift-KeyPress-q>", callback)</SPAN> (в данном примере
KeyPress можно убрать).<BR>
<SPAN CLASS="txt_abz">Третий </SPAN>способ позволяет привязывать виртуальные события - события,
которые генерируются самим приложением. Такие события можно создавать самим, а потом привязывать
их. Имена таких событий помещаются в двойные угловые скобки: &lt;&lt;Paste>>. Есть некоторое
количество уже определенных виртуальных событий.<BR>
<SPAN CLASS="txt_abz">Список модификаторов:</SPAN>
<UL CLASS="list">                                           
<LI> Control;
<LI> Alt;
<LI> Shift;
<LI> Lock;
<LI> Extended;
<LI> Button1, B1 &ndash; нажата первая (левая) кнопка мыши;
<LI> Button2, B2 &ndash; вторая (средняя) кнопка мыши;
<LI> Button3, B3 &ndash; третья (правая);
<LI> Button4, B4 &ndash; четвертая;
<LI> Button5, B5 &ndash; пятая;
<LI> Mod1, M1, Command;
<LI> Mod2, M2, Option;
<LI> Mod3, M3;
<LI> Mod4, M4;
<LI> Mod5, M5;
<LI> Meta, M;
<LI> Double &ndash; двойной щелчок мыши (например, <Double-Button-1>);
<LI> Triple &ndash; тройной;
<LI> Quadruple &ndash; четверной.
</UL>
<P>Типы событий (здесь перечислены все возможные типы событий, для самых часто используемых дано
описание):
<UL CLASS="list">                                           
<LI> Activate, Deactivate;
<LI> MouseWheel &ndash; прокрутка колесом мыши;
<LI> KeyPress, KeyRelease &ndash; нажатие и отпускание клавиши на клавиатуре;
<LI> ButtonPress, ButtonRelease, Motion &ndash; нажатие, отпускание клавиши мыши, движение
мышью;
<LI> Configure &ndash; изменение положения или размера окна;
<LI> Map, Unmap &ndash; показывание или сокрытие окна (например, в случае
сворачивания/разворачивания окна пользователем);
<LI> Visibility;
<LI> Expose &ndash; событие генерируется, когда необходимо все окно или его часть
перерисовать;
<LI> Destroy &ndash; закрытие окна;
<LI> FocusIn, FocusOut &ndash; получение или лишение фокуса;
<LI> Enter, Leave &ndash; Enter генерируется когда курсор мыши "входит" в окно, Leave &ndash;
когда "уходит" из окна;
<LI> Property;
<LI> Colormap;
<LI> MapRequest, CirculateRequest, ResizeRequest, ConfigureRequest, Create;
<LI> Gravity, Reparent, Circulate.
</UL>
<P>Дополнительные методы:
<UL CLASS="list">                                           
<LI> bind_all &ndash; создает привязку для всех виджетов приложения. Отличие от привязки к
окну верхнего уровня заключается в том, что в случае привязки к окну привязываются все виджеты
этого окна, а этот метод привязывает все виджеты приложения (у приложения может быть несколько
окон);
<LI> bind_class &ndash; создает привязку для всех виджетов данного класса;
<LI> unbind &ndash; отвязать виджет от события. В качестве аргумента принимает идентификатор,
полученный от метода bind;
<LI> unbind_all &ndash; то же, что и unbind, только для метода bind_all;
<LI> unbind_class &ndash; то же, что и unbind, только для метода bind_class.
</UL>
<P>Для работы с изображениями в <SPAN CLASS="svoj">tkinter</SPAN> имеется два класса &ndash;
<SPAN CLASS="svoj">BitmapImage</SPAN> и <SPAN CLASS="svoj">PhotoImage</SPAN>.
<SPAN CLASS="svoj">BitmapImage</SPAN> представляет собой простое двухцветное изображение,
<SPAN CLASS="svoj">PhotoImage</SPAN> PhotoImage &ndash; полноцветное изображение.<BR>
<SPAN CLASS="txt_abz">Конструктор </SPAN>класса <SPAN CLASS="svoj">BitmapImage</SPAN>принимает
следующие аргументы:
<UL CLASS="list">                                           
<LI> background и foreground &ndash; цвета фона и переднего плана для изображения. Поскольку
изображение двухцветное, то эти параметры определяют соответственно черный и белый цвет;
<LI> file и maskfile &ndash; пути к файлу с изображением и к маске (изображению, указывающему
какие пиксели будут прозрачными);
<LI> data и maskdata &ndash; вместо пути к файлу можно указать уже загруженные в память
данные изображения. Данная возможность удобна для встраивания изображения в программу.
</UL>
<P>
Пример:<BR>

from Tkinter import *<BR>
data = '''#define image_width 15<BR>
#define image_height 15<BR>
static unsigned char image_bits[] = { <BR>
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1c, 0x30, 0x0c, 0x60, 0x06,<BR>
   0x60, 0x06, 0xc0, 0x03, 0xc0, 0x03, 0x60, 0x06, 0x60, 0x06, 0x30, 0x0c,<BR>
   0x38, 0x1c, 0x00, 0x00, 0x00, 0x00 };'''<BR>
root=Tk()<BR>
image = BitmapImage(data=data, background='red', foreground='green')<BR>
button=Button(root, image=image)<BR>
button.pack()<BR>
root.mainloop()<BR> <BR>
<SPAN CLASS="txt_abz"><SPAN CLASS="svoj">PhotoImage</SPAN> </SPAN>позволяет использовать
полноцветное изображение. Кроме того у этого класса есть несколько (достаточно примитивных) методов
для работы с изображениями. <SPAN CLASS="svoj">PhotoImage</SPAN> гарантированно понимает форматы
GIF и PPM/PGM (под Windows дополнительно PNG).<BR>
<SPAN CLASS="txt_abz">Аргументы </SPAN>конструктора:
<UL CLASS="list">                                           
<LI> file &ndash; путь к файлу с изображением.;
<LI> data &ndash; вместо пути к файлу можно указать уже загруженные в память данные
изображения.
Изображения в формате GIF могут быть закодированы с использование base64. Данная возможность удобна
для встраивания изображения в программу;
<LI> format &ndash; явное указание формата изображения;
<LI> width, height &ndash; ширина и высота изображения;
<LI> gamma &ndash; коррекция гаммы;
<LI> palette &ndash; палитра изображения.
</UL>
<P>
<A NAME="2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>
<H4>2 Разработка приложения с использованием ООП и графического интерфейса</H4>
<A NAME="2.1"></A>

<H4 CLASS="pod">2.1 Создание окна, рамки и кнопок </H4>
<P>В качестве первого примера создания пользовательского приложения с использоваением графической
библиотеки <SPAN CLASS="svoj">tkinter</SPAN> рассмотрим программу
<SPAN CLASS="svoj">gui1.py</SPAN>, в которой создается пользовательское окно, а в нем &ndash;
рамка с тремя кнопками:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">class</SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_frame</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Frame):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">
'''  Рамка с тремя кнопками  '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,master):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">super</SPAN>
<SPAN STYLE="font-size:7mm; color:black"></SPAN>().__init__(master)<BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.create_widgets() </SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">create_widgets</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:green">'''  Создает три кнопки  '''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt1=Button(self,text=</SPAN>
<SPAN STYLE="7mm; color:green">'Кнопка №1'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="7mm; color:green">'12'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt1.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt2=Button(self)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt2.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt2[</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'text'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">]=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Кнопка №2'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt2[</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'fg'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">]=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt2[</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'font'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">]=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'12'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt3=Button(self)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt3.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt3.config(text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Кнопка №3'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="7mm; color:green">'12'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root=Tk()</SPAN>
<SPAN STYLE="font-size:7mm; color:red">#Создание базового окна</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.title(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Рамка с кнопками'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.geometry(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'230x95+800+200'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">app=My_frame(root)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.mainloop()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Для </SPAN>запуска программы <SPAN CLASS="svoj">gui1.py</SPAN> на
выполнение непосредственно из лабораторной работы используется ссылка:
<A HREF="go1.js">IE:gui1.pyw</A>. Для правильной работы ссылки необходимо: 
<UL CLASS="list">                                           
<LI> применять только браузер Internet Explorer;
<LI> использовать специальную запускающую программу go1.js &ndash; <br>
new ActiveXObject("WScript.shell")).run(PYTHON\\LAB13\\gui1.pyw" 
<LI> прописать в ссылке путь к программе go1.js;
<LI> хранить файлы с программами gui1.pyw и go1.js в папке "LAB13".
</UL>
<P> В программе <SPAN CLASS="svoj">gui1.py</SPAN> подключение модуля
<SPAN CLASS="svoj">tkinter</SPAN> осуществляется с использованием формы
<SPAN CLASS="svoj">from tkinter import *</SPAN>. При этом имена всех классов и методов модуля
помещаются в пространство имен программы и обращение к ним происходит без добавления префикса
<SPAN CLASS="svoj">tkinter</SPAN>.<BR>
<SPAN CLASS="txt_abz">На </SPAN>базе класса <SPAN CLASS="svoj">Frame</SPAN> модуля
<SPAN CLASS="svoj">tkinter</SPAN> создается пользовательский класс
<SPAN CLASS="svoj">My_frame</SPAN>, который описывает рамку, содержащую три кнопки. При создании
конструктора этого класса используется встроенная функция <SPAN CLASS="svoj">super()</SPAN>,
которая предназначена для наследования методов родителького класса при их перегрузке. Таким
образом, к методам конструктора класса <SPAN CLASS="svoj">Frame()</SPAN> объекта
<SPAN CLASS="svoj">master</SPAN> добавляются методы:
<SPAN CLASS="svoj">grid()</SPAN> &ndash; для размещения рамки, и
<SPAN CLASS="svoj">create_widgets()</SPAN> &ndash; для создания кнопок в рамке.<BR>
<SPAN CLASS="txt_abz">Кнопки </SPAN> в виде объектов <SPAN CLASS="svoj">bt1</SPAN>,
<SPAN CLASS="svoj">bt2</SPAN> и <SPAN CLASS="svoj">bt3</SPAN> создаются с использованием класса
<SPAN CLASS="svoj">Button</SPAN> модуля <SPAN CLASS="svoj">tkinter</SPAN>. Хотя кнопки создаются в
этом примере одинаковые, способы задания параметров кнопки: <SPAN CLASS="svoj">text</SPAN> &ndash;
указывающего название кнопки, <SPAN CLASS="svoj">fg</SPAN> и <SPAN CLASS="svoj">font</SPAN> &ndash;
задающих соответственно цвет (blue) и размеры (12 пикселей) символов, используются разные:
<UL CLASS="list">                                           
<LI> для кнопки №1 &ndash; непосредственно при ее создании;
<LI> для кнопки №2 &ndash; задаются с помощью ключей словаря экземпляра класса Button;
<LI> для кнопки №3 &ndash; с помощью метода config().
</UL>
<P>После описания класса в программе <SPAN CLASS="svoj">gui1.py</SPAN>:
<UL CLASS="list">                                           
<LI> создается пользовательское окно, обычно именуемое root;
<LI> указываются имя этого окна &ndash; 'Рамка с кнопками' и его размеры и расположение на экране: 
<UL CLASS="list2">
<LI> длина &ndash; 230 пикселей; 
<LI> ширина &ndash; 85 пикселей;
<LI> смещение по горизонтали &ndash; 800 пикселей;
<LI> смещение по вертикали &ndash; 200 пикселей;
</UL>
<LI> в этом окне создается рамка, свойства которой описаны в классе My_frame();
<LI> запускается цикл обработки событий (хотя в этом примере события не обрабатываются).
</UL>
<P>При выполнении программы <A HREF="go1.js">IE: gui1.pyw</A> на экране появляется окно с заданными
графическими объектами.
<A NAME="2.2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.2 Обработка событий </H4>
<P>В качестве примера обработки событий, т.е. действий пользователя над виджетами, приведена
программа <SPAN CLASS="svoj">gui2.py</SPAN>, в которой также, как и в программе
<SPAN CLASS="svoj">gui1.py</SPAN>, создается пользовательский класс
<SPAN CLASS="svoj">My_frame2</SPAN>, описывающий рамку, которая, однако, имеет следующие отличия:
<UL CLASS="list">                                           
<LI> содержит только одну кнопку
<LI> для этой кнопки кроме параметра text, указывающего ее начальное название, задаются также
следующие параметры:
<UL CLASS="list2">                                           
<LI> command &ndash; указывает метод &ndash; обработчик события для кнопки (self.count);
<LI> width &ndash; задает длину кнопки (30);
<LI> bg &ndash; задает цвет фона (#efffef');
<LI> fg &ndash; задает цвет символов;(blue)
<LI> font &ndash; задает размер символов (6mm);
</UL>
<LI> содержит метод count(), который по каждому щелчку по кнопке увеличивает значение переменной
bt_clicks на единицу и изменяет в названии кнопки число выполненных по ней щелчков.  
</UL>
<P CLASS="ba">
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">class</SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_frame2</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Frame):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">
Рамка с кнопкой, подсчитывающей события '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,master):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">super</SPAN>
<SPAN STYLE="font-size:7mm; color:black"></SPAN>().__init__(master)<BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt_clicks=0</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.create_widgets() </SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">create_widgets</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:green">'''  Создает кнопку  '''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt1=Button(self,text=</SPAN>
<SPAN STYLE="7mm; color:green">'Число щелчков: 0'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">command=self.count,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">width=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'20'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">height=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'2'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">bg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'#efffef'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.3cm; font-size:7mm; color:black">font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 14'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt1.grid()</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">count</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt_clicks+=1</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt1[</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'text'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">]=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Число щелчков: '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">str</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self.bt_clicks)</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root=Tk()</SPAN>
<SPAN STYLE="font-size:7mm; color:red"></SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.title(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Обработка событий'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.geometry(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'240x60+800+300'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">app2=My_frame2(root)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.mainloop()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">После </SPAN>запуска программы
<A HREF="go2.js">IE: gui2.pyw</A> на экране появляется окно с кнопкой, имеющей заданные параметры.
После каждого щелчка мышкой по кнопке в ее наименовании число щелчков увеличивается на 1.
<A NAME="2.3"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.3 Работа с текстом</H4>
<P>В качестве примера работы с тестом при использовании графического интерфейса приведена
программа <SPAN CLASS="svoj">gui3.py</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">class</SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_frame3</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Frame):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">
''' Рамка для работы с текстом '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,master):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">super</SPAN>
<SPAN STYLE="font-size:7mm; color:black"></SPAN>().__init__(master)<BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.create_widgets() </SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">create_widgets</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:green">
''' Создает 2 метки, текстовое поле, текстовую область и кнопку '''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#метка-инструкция</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ins_lb=Label(self, text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Как прожить до 100 лет?'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 14'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ins_lb.grid(row=0, column=0, columnspan=2,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#метка-пароль</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ps_lb=Label(self, text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Пароль'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 10'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ps_lb.grid(row=1, column=0, 
sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#текстовое поле для ввода пароля</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ps_ent=Entry(self</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, bg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'#f0f0ff'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 10'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.ps_ent.grid(row=1, column=1,
sticky=E)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#создание текстовой области, куда будет
помещен ответ</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.txt=Text(self, width=30, height=4, wrap=WORD, bg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'#f0f0ff'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 10''</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.txt.grid(row=2, column=0, columnspan=2) </SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#кнопка отправки сообщения</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt=Button(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Узнать секрет'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, bd=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'5'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 12'</SPAN> 
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:7.3cm; font-size:7mm; color:black">command=self.reveal)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.bt.grid(row=3, column=0, sticky=W)
</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">reveal</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">contents=self.ps_ent.get()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">if </SPAN>
<SPAN STYLE="font-size:7mm; color:black">contents==</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'secret'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">):</SPAN><BR>
<SPAN STYLE="margin-left:8.4cm; font-size:7mm; color:black">message=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Чтобы прожить до 100 лет, надо сначала '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">\</SPAN><BR>
<SPAN STYLE="margin-left:8.4cm; font-size:7mm; color:green">
'прожить 99 лет и 11 месяцев, а потом вести себя '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">\</SPAN><BR>
<SPAN STYLE="margin-left:8.4cm; font-size:7mm; color:green">'очень-очень осторожно.'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">else </SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:8.4cm; font-size:7mm; color:black">message=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Вы ввели неправильный пароль.'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.secret_txt.delete(0.0,END)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.secret_txt.insert(0.0,message)</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root=Tk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.title(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Работа с текстом'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.geometry(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">''250x160+850+300'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">app3=My_frame3(root)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.mainloop()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">В </SPAN>программе <SPAN CLASS="svoj">gui3.py</SPAN> описан класс
<SPAN CLASS="svoj">My_frame3</SPAN>, в котором с помощью метода
<SPAN CLASS="svoj">create_widgets()</SPAN> создаются следующие виджеты:
<UL CLASS="list">                                           
<LI> неизменяемые сообщения (метки) на базе класса Label:
<UL CLASS="list2">
<LI> 'Чтобы узнать секрет долголетия введите пароль' (объект ins_lb);
<LI> 'Пароль' (объект ps_lb);
</UL>
<LI> текстовое поле для ввода пароля на базе класса Entry (объект ps_ent);
<LI> кнопка с сообщением (надписью) 'Узнать секрет' на базе класса Button (объект submit_bt);
<LI> текстовая область для помещения ответа на базе класса Text (объект secret_txt), которая
имеет следующие параметры:
<UL CLASS="list2">
<LI> ширина (width) &ndash; 35 символов;
<LI> высота (height) &ndash; 5  рядков;
<LI> перенос по границе слева (WORD))
</UL>
</UL>
<P>Помимо метода <SPAN CLASS="svoj">create_widgets()</SPAN> в классе
<SPAN CLASS="svoj">My_frame3</SPAN> также описан обработчик щелчка по кнопке 'Узнать секрет'
&ndash; метод <SPAN CLASS="svoj">reveal()</SPAN>, который:
<UL CLASS="list">                                           
<LI> получает с помощью метода get() из текстового поля ps_ent введенный пользователем пароль;
<LI> сравнивает его с паролем 'secret' и формирует сообщение, соответствующее результату
сравнения: либо приводится "секрет долголения", либо сообщается о том, что пароль введен
неправильно;
<LI> очищает текстовую область ответа (secret_txt);
<LI> помещает туда сформированное сообщение.
</UL>
<P>Отметим использование в этой программе метода <SPAN CLASS="svoj">grid()</SPAN>, который
осуществляет размещение (упаковку) графических элементов на рамке. В отличие от программ
<SPAN CLASS="svoj">gui1.py</SPAN> и <SPAN CLASS="svoj">gui2.py</SPAN>, где метод
<SPAN CLASS="svoj">grid()</SPAN> использовался без параметров и, следовательно, виджеты
располагались по усматрению интерпретатора, в программе <SPAN CLASS="svoj">gui3.py</SPAN>
явным образом указано расположение элементов. При использовании метода
<SPAN CLASS="svoj">grid()</SPAN> поле рамки изображается в виде решетки, состоящей из рядков и
колонок. Для указания местоположения виджета использованы следующие параметры:
<UL CLASS="list">                                           
<LI> row &ndash; указывает номер рядка;
<LI> column &ndash; указывает номер колонки; 
<LI> columnspan &ndash; указывает размер ячейки в колонках (по умолчанию &ndash; 1);
<LI> sticky &ndash; указывает выравнивание данных относительно границ ячейки:
<UL CLASS="list2">                                           
<LI> N &ndash; по верхней границе;
<LI> E &ndash; по правой границе;
<LI> S &ndash; по нижней границе;
<LI> W &ndash; по левой границе. 
</UL>
</UL>
<P>При выполнении программы <A HREF="go3.js">IE: gui3.pyw</A> на экране появляется окно с
описанными выше виджетами. При вводе в текстовое поле 'Пароль' неправильного пароля в текстовой
области появляется сообщение "Вы ввели неправильный пароль.". А при вводе слова "secret" &ndash;
появляется сообщение "Чтобы прожить до 100 лет, надо сначала прожить 99 лет и 11 месяцев, а потом
вести себя очень-очень осторожно."
<A NAME="2.4"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.4 Использование флажков </H4>
<P>В качестве примера работы с флажками при использовании <SPAN CLASS="svoj">tkinter</SPAN>
приведена программа <SPAN CLASS="svoj">gui4.py</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">class</SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_frame4</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Frame):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">
''' Использование флажков  '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,master):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">super</SPAN>
<SPAN STYLE="font-size:7mm; color:black"></SPAN>(My_frame4, self).__init__(master)<BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.create_widgets() </SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">create_widgets</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:green">
'''  Создает три флажка  '''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#метка-описание</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Label(self,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Укажите любимые телепередачи'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 13'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN> <BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=0, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#метка-инструкция</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Label(self,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Выберете все, что нравится'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 11'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>  <BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=1, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#флажок 'Футбол'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.likes_football=BooleanVar()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Checkbutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Футбол'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.likes_football,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=2, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#флажок 'История'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.likes_history=BooleanVar()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Checkbutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'История'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.likes_history,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=3, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#флажок 'Природа'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.likes_nature=BooleanVar()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Checkbutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Природа'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.likes_nature,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=4, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#текстовая область с результатом</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt=Text(self, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 11'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">
width=40, height=5, wrap=WORD)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.grid(row=5, column=0, columnspan=3)</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">update_text</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">likes=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">if</SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.likes_football.get():</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">likes+=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Вам нравится футбол\n'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">if</SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.likes_history.get():</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">likes+=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Вас привлекает история\n'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">if</SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.likes_nature.get():</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">likes+=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Вам небезразлична природа\n'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.delete(0.0,END)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.insert(0.0,likes)</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root=Tk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.title(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Использование флажков'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.geometry(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'270x185+800+200'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">app4=My_frame4(root)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.mainloop()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">В </SPAN>отличие от программ <SPAN CLASS="svoj">gui1.py</SPAN>,
<SPAN CLASS="svoj">gui2.py</SPAN> и <SPAN CLASS="svoj">gui3.py</SPAN> в программе
<SPAN CLASS="svoj">gui4.py</SPAN> при создании объектов меток
(класс <SPAN CLASS="svoj">Label</SPAN>) используется более короткая форма &ndash; без указания имен
объектов. Это допускается делать в тех случаях, когда имена этих объектов в дальнейшем не
используются в описании класса.<BR>
<SPAN CLASS="txt_abz">Другой </SPAN>особенностью программы <SPAN CLASS="svoj">gui4.py</SPAN>
является использование флажков &ndash; графических элементов класса
<SPAN CLASS="svoj">Checkbutton</SPAN>, при помощи которых осуществляетя выбор (от одной до трех)
телепередач:
<UL CLASS="list">                                           
<LI> о футболе;
<LI> об истории;
<LI> о природе.
</UL>
<P> При этом для каждого флажка:
<UL CLASS="list">                                           
<LI> указывается переменная класса BooleanVar, соответственно:
<UL CLASS="list">                                           
<LI> likes_football;
<LI> likes_history;
<LI> likes_nature.
</UL>
<LI> создается с использованием короткой формы (т.е. без указания имени) объект класса
Checkbutton и задаются следующие значения его параметров:
<UL CLASS="list2">                                           
<LI> для text &ndash; наименование флажка (соответственно, "Футбол", "История" и "Природа");
<LI> для command &ndash; наименование функции (update_text), которая обрабатывает события,
связанные с изменением состояния флажка (т.е. выбран флажок или нет);
<LI> для variable, отражающего текущее состояние флажка, &ndash; имя переменной, с которой этот
параметр связывается(соответственно likes_football, likes_history или likes_nature).
</UL>
</UL>
<P>Обработчик <SPAN CLASS="svoj">update_text()</SPAN> выполняет следующие действия:
<UL CLASS="list">                                           
<LI> последовательно анализирует состояние переменных
<SPAN CLASS="svoj">likes_football</SPAN>, <SPAN CLASS="svoj">likes_history</SPAN> и
<SPAN CLASS="svoj">likes_nature</SPAN> и в зависимости от значения переменной
(<SPAN CLASS="svoj">True</SPAN> или <SPAN CLASS="svoj">False</SPAN>) добавляет или не добавляет к
переменной <SPAN CLASS="svoj">likes</SPAN> значение, соответственно, 'Вам нравится футбол',
'Вас привлекает история' или 'Вам небезразлична природа';
<LI> очищает текстовое поле results_txt;
<LI> выводит в текстовое поле results_txt значение переменной likes.
</UL>
<P>При выполнении программы <A HREF="go4.js">IE: gui4.pyw</A> на экране появляется окно со
следующими виджетами:
<UL CLASS="list">                                           
<LI> меткой-описанием "Укажите любимые телепередачи";
<LI> меткой-инструкцией "Выберете все, что нравится";
<LI> флажками:
<UL CLASS="list">                                           
<LI> "Футбол";
<LI> "История";
<LI> "Природа";
</UL>
<LI>&nbsp; текстовой областью для вывода результатов выбора.
</UL>
<P>При щелчке по любому флажку в текстовую область выводится соответствующее отмеченному флажку
сообщение. При повторном щелчке отметка с флажка снимается и сообщение, указанное для данного
флажка, удаляется из текстовой области.
<A NAME="2.5"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.5 Использование переключателей </H4>
<P>В качестве примера работы с переключателями при использовании <SPAN CLASS="svoj">tkinter</SPAN>
приведена программа <SPAN CLASS="svoj">gui5.py</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">from</SPAN>
<SPAN STYLE="font-size:7mm; color:black">tkinter</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">import</SPAN>
<SPAN STYLE="font-size:7mm; color:black">*</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">class</SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_frame5</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Frame):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">
''' Использование переключателей  '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,master):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">super</SPAN>
<SPAN STYLE="font-size:7mm; color:black"></SPAN>(My_frame5, self).__init__(master)<BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.grid()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.create_widgets() </SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">create_widgets</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:green">
'''  Создает переключатель  '''</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#метка-инструкция</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Label(self,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Укажите любимую телепередачу'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:freen">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:freen">'arial 13'</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=0, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.favorite=StringVar()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.favorite.set(</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">None</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#положение переключателя 'Футбол'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Radiobutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Футбол'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.favorite,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">value=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'о футболе'</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=1, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#положение переключателя 'История'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Radiobutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'История'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.favorite,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">value=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'об истории'</SPAN> <BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=2, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#положение переключателя 'Природа'</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Radiobutton(self,text=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Природа'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">variable=self.favorite,</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">value=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'о природе'</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">command=self.update_text</SPAN><BR>
<SPAN STYLE="margin-left:8.7cm; font-size:7mm; color:black">).grid(row=3, column=0,sticky=W)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:red">#текстовая область для результата</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.results_txt=Text(self, fg=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'blue'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, font=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'arial 10'</SPAN> 
<SPAN STYLE="font-size:7mm; color:black">, width=40, height=5, wrap=WORD)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.grid(row=4, column=0, columnspan=3)</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">update_text</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">message=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">"Ваша любимая телепередача - "</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">message+=self.favorite.get()</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.delete(0.0,END)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">
self.results_txt.insert(0.0,message)</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">root=Tk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.title(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Использование переключателя'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.geometry(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'310x120+800+200'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">app=My_frame5(root)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm;font-size:7mm; color:black">root.mainloop()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">В </SPAN>отличие от программы <SPAN CLASS="svoj">gui4.py</SPAN>, в которой
может осуществляться выбор нескольких телепередач, в программе <SPAN CLASS="svoj">gui5.py</SPAN>
можно выбрать только одну телепередачу. Поэтому вместо трех флажков класса
<SPAN CLASS="svoj">Checkbutton</SPAN> используется один переключатель с тремя положениями,
наименования которых соответствуют наименованиям флажков.<BR>
<SPAN CLASS="txt_abz">При </SPAN>этом выполняются следующие действия:
<UL CLASS="list">                                           
<LI> указывается атрибут self.favorite класса StringVar для хранения наименования выбранного
положения переключателя (при его создании указывается значение None);
<LI> для каждого положения переключателя создается объект класса Radiobutton и указываются
значения его параметров:
<UL CLASS="list2">                                           
<LI> для text &ndash; наименование положения переключателя (соответственно, "Футбол", "История" и
"Природа");
<LI> для command &ndash; наименование функции (update_text), которая обрабатывает события,
связанные с изменением состояния переключателя;
<LI> для variable, отражающего текущее состояние переключателя, &ndash; self.favorite (имя
атрибута, с которыи этот параметр связывается;
<LI> для value &ndash; значение выбранного положения переключателя, соответственно, 'о футболе',
'об истории' или 'о природе'. 
</UL>
</UL>
<P>
<P>Обработчик <SPAN CLASS="svoj">update_text()</SPAN> выполняет следующие действия:
<UL CLASS="list">                                           
<LI> задает начальное значение переменной message ("Ваша любимая телепередача - ");
<LI> используя атрибут self.favorite и метод get() получает значение выбранного положения
переключателя и добавляет его к значению переменной message;
<LI> очищает текстовое поле results_txt;
<LI> выводит в текстовое поле results_txt значение переменной message.
</UL>
<P>При выполнении программы <A HREF="go5.js">IE: gui5.pyw</A> на экране появляется окно со
следующими виджетами:
<UL CLASS="list">                                           
<LI> меткой-инструкцией "Укажите любимую телепередачу";
<LI> переключателем, имеющем три состояния:
<UL CLASS="list">                                           
<LI> "Футбол";
<LI> "История";
<LI> "Природа";
</UL>
<LI> текстовой областью для вывода результата выбора.
</UL>
<P>При щелчке по одному из положений переключателя в текстовой области появляется соответствующее
сообщение.
<A NAME="ind"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H3>Индивидуальные задания</H3>
<P>Разработать программу на языке Python, в которой на базе модуля
<SPAN CLASS="svoj">tkinter</SPAN> разработан графический интерфейс, имеющий несколько окон:
<UL CLASS="list">                                           
<LI> окно с кнопкой (объект Button), надпись на которой меняется по каждому щелчку и содержит
следующую информацию &ndash; номер щелчка и число, которое определяется согласно колонке
"Число" табл. №1:
<UL CLASS="list2"> 
<LI> 1 &ndash; очередное простое число (начиная с 1);
<LI> 2 &ndash; очередное число Фибоначчи (начиная с 1);
<LI> 3 &ndash; очередное простое число вида 2 <sup>n</sup> - 1 (начиная с n = 1);
</UL>
<LI> окно, содержащее: 
<UL CLASS="list2"> 
<LI> текстовое поле (объект Text), куда выводится начало некоторого небольшого сообщения
(рассказа и т.п.);
<LI> поле ввода пароля (объект Entry);
<LI> кнопку для продолжения вывода сообщения (объект Button);
<LI> второе текстовое поле (объект Text), куда выводится неожиданное (смешное) завершение сообщения
(при правильном вводе пароля) или сообщение о неправильном вводе пароле;
<LI> метки (объект Label) &ndash; при необходимости;
</UL>
<LI> окно, содержащее:
<UL CLASS="list2"> 
<LI> пять флажков (объекты Checkbutton), задающие согласно колонке "Флажки" табл. №1:
<br> 1 &ndash; числа 1, 2, 4, 8 и 16;
<br> 2 &ndash; 5 букв кириллицы (на усмотрение студента);
<br> 2 &ndash; 5 английских букв (на усмотрение студента);
<LI> текстовое поле, куда помещается результат: 
<br> для чисел &ndash; сумма заданных чисел;
<br> для букв  &ndash; слово, состоящее из выбранных букв;
</UL>
<LI> окно, содержащее:
<UL CLASS="list2"> 
<LI> переключатели (объекты Radiobutton), задающие согласно колонке "Переключатели"
табл. №1:
<br> 1 &ndash; изменяемые типы;
<br> 2 &ndash; неизменяемые типы;
<br> 3 &ndash; контейнеры;
<br> 4 &ndash; последовательности; 
<LI> текстовое поле, куда помещается результат &ndash; пример литерала для выбранного класса.
</UL>
</UL>
<P><TABLE ALIGN=center WIDTH="40%" border cellspacing="0">
<CAPTION ALIGN="top"><p class="ba">Таблица 1 &ndash; Перечень индивидуальных заданий</CAPTION>
<TR><TH>Номер<BR>п/п<TH>Число<TH>Флажкий<TH>Переключатели
<TR ALIGN=center><TD>1<TD>1<TD>3<TD>1
<TR ALIGN=center><TD>2<TD>2<TD>1<TD>2
<TR ALIGN=center><TD>3<TD>3<TD>2<TD>3
<TR ALIGN=center><TD>4<TD>1<TD>3<TD>4
<TR ALIGN=center><TD>5<TD>2<TD>1<TD>1
<TR ALIGN=center><TD>6<TD>3<TD>2<TD>2
<TR ALIGN=center><TD>7<TD>1<TD>3<TD>3
<TR ALIGN=center><TD>8<TD>2<TD>1<TD>4
<TR ALIGN=center><TD>9<TD>3<TD>2<TD>1
<TR ALIGN=center><TD>10<TD>1<TD>3<TD>2
<TR ALIGN=center><TD>11<TD>2<TD>1<TD>3
<TR ALIGN=center><TD>12<TD>3<TD>2<TD>4
<TR ALIGN=center><TD>13<TD>1<TD>3<TD>1
<TR ALIGN=center><TD>14<TD>2<TD>1<TD>2
<TR ALIGN=center><TD>15<TD>3<TD>2<TD>3
<TR ALIGN=center><TD>16<TD>1<TD>3<TD>4
<TR ALIGN=center><TD>17<TD>2<TD>1<TD>1
<TR ALIGN=center><TD>18<TD>3<TD>2<TD>2
<TR ALIGN=center><TD>19<TD>1<TD>3<TD>3
<TR ALIGN=center><TD>20<TD>2<TD>1<TD>4
</table>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>
