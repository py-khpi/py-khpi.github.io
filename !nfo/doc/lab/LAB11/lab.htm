<HTML>
<HEAD>
<TITLE>Лабораторная работа 11: Создание пользовательских классов</TITLE>
<LINK REL=STYLESHEET TYPE="text/css" HREF="../heads.css">                               
<STYLE>TH,TD{font-size:5.5mm;border:1 double blue}</STYLE>
</HEAD>
<BODY>
<H1> ЛАБОРАТОРНАЯ РАБОТА №11</H1>
<H2> <SPAN CLASS="beg">Тема: </SPAN>Создание пользовательских классов</H2>
<H2> <SPAN CLASS="beg">Цель: </SPAN>
Рассмотрение способов создания классов, объектов и их использования </H2>
<A id="beg"></A>
<H3>ОГЛАВЛЕНИЕ</H3> 
<A CLASS="com" HREF="#1">1 Создание пользовательского класса<BR>
<A CLASS="com" HREF="#1">1.1 Объявление класса <BR>
<A CLASS="com" HREF="#1.2">1.2 Создание объектов &ndash; экземпляров класса<BR>
<A CLASS="com" HREF="#2">2 Использование атрибутов и методов при объявлении класса<BR>
<A CLASS="com" HREF="#2">2.1 Использование специальных методов при объявлении класса<BR>
<A CLASS="com" HREF="#2.2">2.2 Применение атрибутов класса и статических методов<BR>
<A CLASS="com" HREF="#2.3">2.3 Использование закрытых атрибутов и методов<BR>
<A CLASS="com" HREF="#2.4">2.4 Управление атрибутами<BR>
<A CLASS="com" HREF="#ind">Индивидуальные задания<BR>
<A NAME="1"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4>1 Создание пользовательского класса</H4>
<p> Классы в языке Python &ndash; это объекты первого рода, т.е. их можно создавать в процессе
выполнения программы, сохранять в переменной, передавать в качестве аргументов функций, возвращать
как результат из функций и др. 
<A id="1.1"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.1 Объявление класса</H4>
<P>Объявление класса осуществляется с помощью оператора <SPAN CLASS="svoj">class</SPAN>, в первой
строке которого (заголовке) указываеся служебное слово <SPAN CLASS="svoj">class</SPAN>, за которым
следует имя класса. По соглашению имена классов должны начинаться с заглавной буквы. В скобках
указывается базовый класс (его называют также родительским классом или надклассом (англ. 
superclass)) &ndash; это может быть имя одного из ранее созданных классов или встроенный тип самого
верхнего уровня <SPAN CLASS="svoj"> &ndash; object</SPAN>. Отметим, что если базовым классом
является <SPAN CLASS="svoj">object</SPAN>, его можно не указывать. В этом случае скобки не нужны.
Заголовок заканчивается двоеточием. Например,<BR><BR>      
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_class</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">object</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN>:<BR>
<P CLASS="ba">или<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_class</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Класс </SPAN>может состоять только из заголовка. Но поскольку синтаксис
требует, чтобы после заголовка класса следовало описание класса, необходимо указать вместо него
оператор <SPAN CLASS="svoj">pass</SPAN>, который ничего не делает, но показывает наличие описания:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">Min_class</SPAN>:<BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#ff8000">pass</SPAN><BR>
<P CLASS="ba">или<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_class</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">pass</SPAN><BR><BR>
<SPAN CLASS="txt_abz">При </SPAN>описании класса второй строкой может быть строка, взятая в
тройные кавычки, которая документирует класс (см. использование строки документирования при
объявлении функции в <A HREF="../LAB6/lab.htm#1.1">подраздел 1.1</A> лаб. раб. №6).
Обычно в этой строке указывается назначение класса, например:<BR><BR>
<SPAN STYLE="margin-left:3.8cm; font-size:7mm; color:green">'''Пример простого класса'''</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Классы </SPAN>могут иметь атрибуты, которые делятся на атрибуты-переменные и
атрибуты-методы. Атрибуты-переменные указываются с помощью оператора присваивания и являются
ссылками на объекты, значеения которых им было присвоено.<BR> 
<SPAN CLASS="txt_abz">Форма </SPAN>описания атрибутов-методов класса совпадает с описанием функций
(см. <A HREF="../LAB6/lab.htm#1.1">подраздел 1.1</A> лаб. раб. №6), но первым аргументом
каждого метода (за исключением статичестких методов (см. <A HREF="#2.2">подраздел 2.2</A>) должно
быть слово <SPAN CLASS="svoj">self</SPAN>, которое возвращает ссылку на объект, вызывающий данный
метод. Можно отметить, что <SPAN CLASS="svoj">self</SPAN> в языке Python не является ключевым
словом и используется по соглашению. <BR> 
<SPAN CLASS="txt_abz">Добавив </SPAN>в класс <SPAN CLASS="svoj">My_class</SPAN> описания
атрибута-переменной <SPAN CLASS="svoj">a</SPAN> и атрибута-метода <SPAN CLASS="svoj">f()</SPAN>,
получим следующее объявление класса:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">My_class</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:3.8cm; font-size:7mm; color:green">'''Пример простого класса'''</SPAN><BR>
<SPAN STYLE="margin-left:3.8cm; font-size:7mm; color:black">a=25</SPAN><BR>
<SPAN STYLE="margin-left:3.8cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">f</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:5.0cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">"Привет всем!"</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR><BR>
<SPAN CLASS="txt_abz">При </SPAN>создании класса формируется его пространство имен, которое
состоит из имен его атрибутов.<BR>
<SPAN CLASS="txt_abz">В </SPAN>языке Python класс является объектом класса
<SPAN CLASS="svoj">type</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">type</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(My_class)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">&lt;class 'type'></SPAN>,
<p class 'ba'>который поддерживает два вида операций:
<UL CLASS="list">   
<LI> доступ к своим атрибутам;
<LI> инстанцирование (англ. instantiation), т.е. создание экземпляров класса (англ. instances).
</UL>
<P>Для доступа к атрибутам класса используется обычный для объекта синтаксис с использованием
оператора точки &ndash; <SPAN CLASS="svoj">Obj.name</SPAN></SPAN></SPAN>, где:
</SPAN><SPAN CLASS="svoj">Obj</SPAN> &ndash; имя объекта, <SPAN CLASS="svoj">name</SPAN> &ndash;
имя атрибута объекта. Например, получить значение атрибута-переменной <SPAN CLASS="svoj">a</SPAN>
класса <SPAN CLASS="svoj">My_class</SPAN> можно следующим образом:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.a</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">25</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Если </SPAN>попытаться вызвать атрибут-метод <SPAN CLASS="svoj">f()</SPAN>
класса <SPAN CLASS="svoj">My_class</SPAN>, то это вызовет ошибку:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.f()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
TypeError: f() missing 1 required positional argument: 'self'</SPAN>,<BR>
<P CLASS="ba">потому, что так вызывать можно только статические методы классов
(см. <A HREF="#2.2">подраздел 2.2</A>), а методы, в которых указан параметр
<SPAN CLASS="svoj">self</SPAN>, могут вызывать только объекты &ndash; экземпляры класса. <BR>
<SPAN CLASS="txt_abz">Каждый </SPAN>класс имеет преопределенные атрибуты (см. табл. 1).
<table align="center" width="80%" border cellspacing="0">
<CAPTION ALIGN="top"><p class="ba">Таблица 1 &ndash; Преопределенные атрибуты класса</CAPTION>
<TR><TH>Атрибут<TH>Тип<TH>Доступ<SUP>(1)</SUP><TH>Описание
<TR><TD>__dict__<TD>словарь<TD ALIGN=center>R/W<TD>пространство имен класса
<TR><TD>__name__<TD>строка<TD ALIGN=center>R<TD>имя класса
<TR><TD>__qualname__<TD>строка<TD ALIGN=center>R<TD>полное имя класса или функции
<TR><TD>__bases__<TD>кортеж классов<TD ALIGN=center>R<TD>классы, от которых наследуется данный
класс
<TR><TD>__doc__<TD>строка или None<TD ALIGN=center>R/W<TD>строка документации класса
<TR><TD>__module__<TD>строка<TD ALIGN=center>R/W<TD>имя модуля, в котором данный класс был определен
</TABLE>
<P>Примечание (1): R/W &ndash; разрешены запись и чтение, R &ndash; разрешено только чтение.
<P>Приведем значения некоторых преопределенных атрибутов класса <SPAN CLASS="svoj">My_class</SPAN>:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.__name__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'My_class'</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.__bases__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">(&lt;class 'object'>,)</SPAN>,<BR><BR>
<SPAN CLASS="txt_abz">т.е. </SPAN>хотя базовый класс явно задан не был, по умолчанию таковым 
является класс <SPAN CLASS="svoj">object</SPAN>, указанный в виде кортежа.<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.__doc__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'Пример простого класса'</SPAN>,<BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.__module__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'__main__'</SPAN>.
<p> Python позволяет создавать классы динамически. Для этого используется встроенная функция
<SPAN CLASS="svoj">type()</SPAN>, которая, если задан один аргумент &ndash;
<SPAN CLASS="svoj">type(object)</SPAN>, возвращает тип (класс) объекта
<SPAN CLASS="svoj">object</SPAN> (см. <a href="#1.1">подраздел 1.1 </a>). Если при вызове функции
указано три аргумента &ndash; <SPAN CLASS="svoj">type(name, bases, dict)</SPAN>, то она возвращает
класс с именем <SPAN CLASS="svoj">name</SPAN>, который наследует классы, заданные кортежем
<SPAN CLASS="svoj">bases</SPAN>, и имеет атрибуты, заданные словарем
<SPAN CLASS="svoj">dict</SPAN>: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">A= </SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">type</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">"A"</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, (</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">object </SPAN>
<SPAN STYLE="font-size:7mm; color:black">,), </SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">dict </SPAN>
<SPAN STYLE="font-size:7mm; color:black">(a=25))</SPAN>. 
<p> Этот класс эквивалентен следующему классу, созданному статически: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">A</SPAN>:<BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">a=25</SPAN>.<BR><BR> 
<A id="1.2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">1.2 Создание объектов &ndash; экземпляров класса</H4>
<P>После объявления класса можно выполнить операцию инстанцирования класса. Создадим один экземпляр
этого класса &ndash; объект <SPAN CLASS="svoj">m1</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m1=My_class()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Экземпляры </SPAN>классов имеют следующие преопределенные атрибуты
(см. табл. 2).
<P><table align="center" width="55%" border cellspacing="0">
<CAPTION ALIGN="top"><p class="ba">Таблица 2 &ndash; Преопределенные атрибуты экземпляра класса
</CAPTION>
<TR><TH>Атрибут<TH>Тип<TH>Доступ<TH>Описание
<TR><TD>__dict__<TD>словарь<TD ALIGN=center>R/W<TD>пространство имен экземпляра класса
<TR><TD>__class__<TD>класс<TD ALIGN=center>R/W<TD>класс этого экземпляра
</TABLE> 
<p>Определим класс объекта <SPAN CLASS="svoj">m1</SPAN>: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m1.__class___</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">&lt;class '__main__.My_class'>
</SPAN>.<BR><BR>
<SPAN CLASS="txt_abz">Важно </SPAN>понимать, что при создании каждого экземпляра класса создается
новое пространство имен, принадлежащее этому экземпляру, которое не совпадает с пространством имен
самого класса. Поэтому даже если атрибуты класса и экземпляра класса имеют одинаковое имя,
они ссылаются на разные объекты и могут иметь разные значения. Например, класс 
<SPAN CLASS="svoj">My_class</SPAN> и экземпляр этого класса <SPAN CLASS="svoj">m1</SPAN> имеют
следующие пространства имен:
<UL CLASS="list">   
<LI> My_class: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">My_class.__dict__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">
mappingproxy({'f': &lt;function My_class.f at 0x023C0588>, '__doc__': 'Пример простого класса',
</SPAN><BR> 
<SPAN STYLE="margin-left:2.5cm; font-size:7mm; color:blue">
'__module__': '__main__', 'a': 25, '__dict__': &lt;attribute '__dict__' of 'My_class' objects>,
</SPAN><BR>
<SPAN STYLE="margin-left:2.5cm; font-size:7mm; color:blue">
'__weakref__': &lt;attribute '__weakref__' of 'My_class' objects>})</SPAN>;<BR>
<LI> m1: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m1.__dict__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">{}</SPAN><BR>
</UL>
<P> Пространство имен класса <SPAN CLASS="svoj">My_class</SPAN> содержит:
<UL CLASS="list">   
<LI> имена преопределенных атрибутов класса:
<UL CLASS="list2">   
<LI> '__doc__';
<LI> '__module__';
<LI> '__main__', 
<LI> '__dict__';
<LI> '__weakref__' (weakref &ndash; слабая ссылка). Эти ссылки отличаются от обычных тем, что,
если на объект указывают только слабые ссылки, то системе сборки мусора разрешается при
необходимости удалять этот объект и освобождать память; 
</UL>
<LI> имена атрибутов класса:
<UL CLASS="list2"> 
<LI> 'a';
<LI> 'f'.
</UL>
</UL>
<P> Пространство имен  экземпляра класса <SPAN CLASS="svoj">m1</SPAN> пусто. Тем не менее при
обращении к атрибуту <SPAN CLASS="svoj">a</SPAN> этого объекта<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> m1.a</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">25</SPAN><BR><BR>
получаем значение 25, т.е. значение атрибута класса. Это происходит потому, что интерпретатор
сначала ищет искомое имя в адресном простанстве экземпляра класса. Если его там нет, то &ndash; в
адресном пространстве самого класса. После присвоения объекту нового значения:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> m1.a=100</SPAN><BR><BR>
его адресное пространство изменилось:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> m1.__dict__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">{'a': 100}</SPAN><BR><BR>
и значения атрибута <SPAN CLASS="svoj">a</SPAN> класса и экземпляра класса стали отличаться:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> m1.a</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">100</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black"> My_class.a</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">25</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Вызов </SPAN>метода <SPAN CLASS="svoj">f()</SPAN> как метода экземпляра
класса не вызывает ошибки:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m1.f()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Привет всем!</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Описание </SPAN>сласса в языке Python является динамическим, т.е. в него
в последствии можно добавить новые атрибуты, например, атрибут <SPAN CLASS="svoj">new_a</SPAN>
: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">My_class.new_a=</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Новый'</SPAN><BR><BR>
или удалить старые (<SPAN CLASS="svoj">f</SPAN>):<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">del </SPAN>
<SPAN STYLE="font-size:7mm; color:black">My_class.f</SPAN><BR><BR>
<SPAN CLASS="txt_abz">После </SPAN>создания объекта <SPAN CLASS="svoj">m2</SPAN>, экземпляра
измененного класса <SPAN CLASS="svoj">My_class</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m2=My_class()</SPAN><BR><BR>
проверим его атрибуты:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m2.new_a</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'Новый'</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">m2.f()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: 'My_class' object has no attribute 'f'</SPAN><BR> <BR> 
<SPAN CLASS="txt_abz">Т.е, </SPAN>атрибут <SPAN CLASS="svoj">new_a</SPAN> в класс добавлен, а
атрибут <SPAN CLASS="svoj">f</SPAN> из класса удален.<BR>
<SPAN CLASS="txt_abz">Отметим, </SPAN>что преопределенный атрибут
<SPAN CLASS="svoj">__qualname__</SPAN> был введен в язык Python, начиная с версии 3.3. Он указывает
полное имя (англ. qualified name) класса или функции. Для классов и функций верхнего уровня атрибут
<SPAN CLASS="svoj">__qualname__</SPAN> совпадает с <SPAN CLASS="svoj">__name__</SPAN>. Для
проверки создадим класс <SPAN CLASS="svoj">A</SPAN>, содержащий класс <SPAN CLASS="svoj">B</SPAN>:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">A</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#ff8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">B</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">pass </SPAN><BR><BR>
и определим для классов <SPAN CLASS="svoj">A</SPAN> и <SPAN CLASS="svoj">B</SPAN> значения
атрибутов <SPAN CLASS="svoj">__name__</SPAN> и <SPAN CLASS="svoj">__qualname__</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">A.__name__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'A'</SPAN><BR>  
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">A.__qualname__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'A'</SPAN><BR>  
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">A.B.__name__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'B'</SPAN><BR>  
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">A.B.__qualname__</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'A.B'</SPAN><BR> <BR>
т.е. для класса верхнего уровня <SPAN CLASS="svoj">A</SPAN> значения атрибутов
<SPAN CLASS="svoj">__name__</SPAN> и <SPAN CLASS="svoj">__qualname__</SPAN> совпадают, а для
встроенного класса <SPAN CLASS="svoj">B</SPAN> &ndash; нет. 
<A id="2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4>2 Использование атрибутов и методов при объявлении класса</H4>
<A id="2.1"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.1 Использование специальных методов при объявлении класса</H4>
<P>В языке Python имеются специальные методы
(см. <a href="../LAB1/lab.htm#2">раздел 2 </a> лаб. раб. №1), предназначенные для использования во
время объявления класса:
<UL CLASS="list">   
<LI> __new__(cls[, . .]) &ndash; статический метод класса, вызывается первым при создании
экземпляра класса, создает новый объект, возвращая на него ссылку. Первый параметр cls указывает на
класс, остальные параметры являются необязательными и, если указаны, передаются методу __init__();
<LI> __init__(self[, . .]) &ndash; вызывается при создании экземпляра класса. Первый параметр
self (хотя и не является ключевым словом языка, но менять его на другое имя не следует) указывает
на созданный объект, остальные аргументы получает от метода __new__(). Устанавливает начальные
значения атрибутов объекта. Никогда не возвращает значения. <BR>
<SPAN CLASS="txt_abz">В </SPAN>литературе метод __init__ иногда называют конструктором класса, но,
строго говоря, это не так &ndash; он реализует только часть функций, выполняемых конструкторами
таких языков, как C++ или Java &ndash; осуществляет инициализацию атрибутов объекта, но не создает
сам объект, поскольку эту функцию, как указывалось выше, выполняет метод __new__. Поэтому называя в
языке Python метод  __init__  "конструктором класса", необходимо об этом помнить;
<LI> __str__() &ndash; вызывается функциями str(), print() и format(). Возвращает строковое
представление объекта;
<LI> __del__() &ndash;  вызывается при уничтожениии экземпляра класса, т.е. является
деструктором класса. Отметим, что метод __del__ не влияет на работу оператора del, но влияет на
работу системы сборки мусора.
</UL>
<P> Метод <SPAN CLASS="svoj">__new__()</SPAN> при создании пользовательских классов используется
нечасто. Можно привести две области его применения. Во-первых, когда нужно выполнить какие-то
действия до выполнения метода <SPAN CLASS="svoj">__init__()</SPAN>. Это бывает необходимо, например,
при наследовании классов неизменяемых типов
(см. <a href="../LAB12/lab.htm#2.3"> подраздел 2.3 </a> лаб. раб. №12).<BR>
<SPAN CLASS="txt_abz">Во-вторых, </SPAN>когда необходимо контролировать процесс создания
экземпляров класса. Примером может служить класс, который инстанцирует только один объект:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">One</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">obj=</SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">None</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#ff8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__new__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(cls,*p,**kw):</SPAN><BR>
<SPAN STYLE="margin-left:6.5cm; font-size:7mm; color:#ff8000">if </SPAN>
<SPAN STYLE="font-size:7mm; color:black">cls.obj </SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">is None </SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:8.4cm; font-size:7mm; color:black">cls.obj= </SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">object</SPAN>
<SPAN STYLE="font-size:7mm; color:black">.__new__(cls,*p,**kw)</SPAN><BR>
<SPAN STYLE="margin-left:6.5cm; font-size:7mm; color:#ff8000">return </SPAN>
<SPAN STYLE="font-size:7mm; color:black">cls.obj</SPAN><BR><BR>
<SPAN CLASS="txt_abz">При </SPAN>создании каждого экземпляра класса <SPAN CLASS="svoj">One</SPAN>
первым вызывается метод <SPAN CLASS="svoj">__new__</SPAN> этого класса, который проверяет значение
атрибута <SPAN CLASS="svoj">obj</SPAN> класса <SPAN CLASS="svoj">One</SPAN>. Если оно равно None,
т.е. создается первый экземпляр класса, вызывается метод <SPAN CLASS="svoj">__new__</SPAN> базового
класса <SPAN CLASS="svoj">object</SPAN>. Он создает объект &ndash; экземпляр класса, ссылка на
который присваиваеься атрибуту <SPAN CLASS="svoj">obj</SPAN> класса <SPAN CLASS="svoj">One</SPAN>.
Это же значение возвращается методом <SPAN CLASS="svoj">__new__</SPAN> класса
<SPAN CLASS="svoj">One</SPAN>. <BR>
<SPAN CLASS="txt_abz">При </SPAN> создании последующих экземпляров класса, поскольку значение
атрибута <SPAN CLASS="svoj">obj</SPAN> уже не равно None, метод <SPAN CLASS="svoj">__new__</SPAN>
базового класса не вызывается и вновь созданный объект получает ссылку с тем же значением, которое
хранится в атрибуте <SPAN CLASS="svoj">obj</SPAN>. Таким образом все последующие экземпляры класса
<SPAN CLASS="svoj">One</SPAN> являются одним и тем же объектом. Это можно проверить. Создадим два
экземпляра класса <SPAN CLASS="svoj">One</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">one1=One()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">one2=One()</SPAN><BR><BR>
и проверим их идентичность:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">id</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(one1)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">36932784</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">id</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(one2)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">36932784</SPAN><BR><BR>
Можно показать, что ссылки <SPAN CLASS="svoj">one1</SPAN> и <SPAN CLASS="svoj">one2</SPAN> &ndash;
это ссылки на один и тот же объект и по-другому:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">one1 </SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">is </SPAN>
<SPAN STYLE="font-size:7mm; color:black">one2 </SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">True</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Использование </SPAN>специальных методов <SPAN CLASS="svoj">__init__()</SPAN>,
<SPAN CLASS="svoj">__str__()</SPAN> и <SPAN CLASS="svoj">__del__()</SPAN> показано в объявлении
класса <SPAN CLASS="svoj">Virt_zoo</SPAN>, который описывает поведение виртуальных зверюшек:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">Virt_zoo</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">object</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN>:<BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">''' Виртуальные зверюшки '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,name):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Появилась новая зверюшка.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.name=name</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__str__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#FF8000">return </SPAN>
<SPAN STYLE="font-size:7mm; color:green">
'Класс &ndash; Virt_zoo, имя зверюшки &ndash; '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+self.name</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__del__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Зверюшка исчезла.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR> <BR>
</UL>
<P>С помощью метода <SPAN CLASS="svoj">__init__()</SPAN>, который вызывается при каждом создании
экземпляра класса (для <SPAN CLASS="svoj">Virt_zoo</SPAN> это будет виртуальная зверюшка), на экран
выводится сообщение об этом и выполняется инициализация атрибута <SPAN CLASS="svoj">name</SPAN>,
указывающего имя этой зверюшки. Отметим, что первым параметром каждого метода в объявлении класса,
за исключением статических методов (см. <A HREF="#2.2">подраздел 2.2</A>), является слово
<SPAN CLASS="svoj">self</SPAN>, которое при вызовах этих методов не указывается. <BR> 
<SPAN CLASS="txt_abz">Метод </SPAN><SPAN CLASS="svoj">__str__</SPAN>вызывается при использовании
функции <SPAN CLASS="svoj">print(obj)</SPAN> и возвращает данные об объекте
<SPAN CLASS="svoj">obj</SPAN> &ndash; в данном случае это имя класса и имя созданной зверюшки.<BR>
<SPAN CLASS="txt_abz">С </SPAN>помощью десктруктора класса (метода
<SPAN CLASS="svoj">__del__</SPAN>) осуществляется вывод на экран сообщения "Зверюшка исчезла" при
удалении объекта класса <SPAN CLASS="svoj">Virt_zoo</SPAN>.
<BR>
<SPAN CLASS="txt_abz">После </SPAN>объявления класса можно выполнять операции его инстанцирования,
то есть создания объектов класса. Создаются два экземпляра класса
<SPAN CLASS="svoj">Virt_zoo</SPAN> &ndash; объекты <SPAN CLASS="svoj">v1</SPAN> и
<SPAN CLASS="svoj">v2</SPAN>:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Колобок'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Серый волк'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR><BR>
<SPAN CLASS="txt_abz">При </SPAN>создании каждого объекта на экран выводится, предусмотренное
конструктором, сообщение "Появилась новая зверюшка.".<BR>
<SPAN CLASS="txt_abz">По </SPAN>умолчанию все методы и атрибуты класса являются открытыми (public)
и клиентский код может обращаться к этим методам и получать значения атрибутов. Поэтому получим
для каждого созданного объекта значение его атрибута <SPAN CLASS="svoj">name</SPAN>:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.name</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'Колобок'</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2.name</SPAN> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">'Серый волк'</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Указав </SPAN>имя класса в функции <SPAN CLASS="svoj">print()</SPAN>, 
получим данные, определяемые методом <SPAN CLASS="svoj">__str__()</SPAN>, заданные по умолчанию для
класса <SPAN CLASS="svoj">Virt_zoo</SPAN>:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(Virt_zoo)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">
&lt;class '__main__.Virt_zoo'></SPAN>,<BR><BR>
т.е. класс Virt_zoo объявлен в модуле __main__ .<BR>
<SPAN CLASS="txt_abz">Указав </SPAN>имя объекта в функции <SPAN CLASS="svoj">print()</SPAN>, 
получим данные об объекте, определяемые пользовательским специальным методом
<SPAN CLASS="svoj">__str__()</SPAN>:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(v1)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">
Класс &ndash; Virt_zoo, имя зверюшки &ndash; Колобок</SPAN><BR><BR>
<SPAN CLASS="txt_abz">После </SPAN>удаления созданного объекта <SPAN CLASS="svoj">v1</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#ff8000">del </SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1</SPAN><BR><BR>
<SPAN CLASS="txt_abz">в соответствии с работой пользовательского специального метода
<SPAN CLASS="svoj">__del__()</SPAN> появляется </SPAN>сообщение<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Зверюшка исчезла.</SPAN><BR><BR><BR>
<SPAN CLASS="txt_abz">И </SPAN>последующее обращение к атрибуту объекта вызовет исключение<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.name</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">NameError: name 'v1' is not defined</SPAN>
<BR> <BR>
<SPAN CLASS="txt_abz">Как </SPAN> уже отмечалось, после объявления класса в него можно добавлять
новые атрибуты и методы. Поэтому создадим метод <SPAN CLASS="svoj">talk()</SPAN>:<BR> <BR> 
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">talk</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Привет! Меня зовут '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+self.name+</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN>,<BR> <BR>
который при вызове выводит на экран сообщение, сделанное зверюшкой, и добавим этот метод в класс
<SPAN CLASS="svoj">Virt_zoo</SPAN>:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">Virt_zoo.talk=talk</SPAN><BR><BR>
<SPAN CLASS="txt_abz">После </SPAN>этого вызовем для каждого созданного объекта класса
<SPAN CLASS="svoj">Virt_zoo</SPAN> метод <SPAN CLASS="svoj">talk()</SPAN>:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.talk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Привет! Меня зовут Колобок.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2.talk()</SPAN> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Привет! Меня зовут Серый волк.</SPAN><BR>
<A NAME="2.2"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.2 Применение атрибутов класса и статических методов</H4>
<P>Атрибуты позволяют присваивать разные значения разным объектам одного и того же класса. Но
бывает и такая информация, которая относиться не к индивидуальным объектам, а ко всему классу.
Нпример, необходимо следить за количеством созданных зверюшек. Можно было для этого присвоить
каждому объекту атрибут <SPAN CLASS="svoj">total</SPAN>, но тогда при создании каждого нового
объекта необходимо будет изменять значение этого атрибута у всех уже созданных объектов. А это
сделать непросто.<BR>
<SPAN CLASS="txt_abz">Язык </SPAN>Python позволяет создавать значения, связанные с классом, которые
называются атрибутами класса, и создавать методы, связанные с классом, называемые статическими.
Внесем в выше описанный класс <SPAN CLASS="svoj">Virt_zoo</SPAN> следующие изменения:
<UL CLASS="list">   
<LI> не будем указывать, что создаваемый класс является наследником класса
<SPAN CLASS="svoj">object</SPAN> (это ни на что не влияет);
<LI> добавим атрибут класса:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">total=0</SPAN>
<SPAN STYLE="font-size:7mm; color:red"># Число созданных зверюшек
<SPAN STYLE="font-size:7mm; color:black">;<BR><BR>
<LI> добавим описание статического метода status(), который выводит на экран текущее
количество зверюшек:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">staticmethod</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">status</SPAN>
<SPAN STYLE="font-size:7mm; color:black">():</SPAN><BR>
<SPAN STYLE="margin-left:3.6cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Всего зверюшек &ndash; '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, Virt_zoo.total)</SPAN><BR> <BR>
(для указания того, что метод является статическим используется декоратор staticmethod);
<LI> добавим в конструктор увеличение значения атрибута total на 1:
<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:black">Virt_zoo.total+=1</SPAN>;<BR>
<LI> уберем методы __str__ и __del__, которые были проверены в
<a href="#2.1">разделе 2.1 </a> и в дальнейших примерах использоваться не будут.
</UL>
<P>После внесенных изменений описание класса выглядит следующим образом:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">Virt_zoo</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">''' Виртуальные зверюшки '''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">total=0</SPAN>
<SPAN STYLE="font-size:7mm; color:red"># Число созданных зверюшек</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,name):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Появилась новая зверюшка.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.name=name</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">Virt_zoo.total+=1</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">staticmethod</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">status</SPAN>
<SPAN STYLE="font-size:7mm; color:black">():</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Всего зверюшек &ndash; '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">, Virt_zoo.total)</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">talk</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Привет! Меня зовут '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+self.name, </SPAN>
<SPAN STYLE="font-size:7mm; color:green">'.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR> <BR>
<SPAN CLASS="txt_abz">Обращаться </SPAN>к атрибутам класса и статическим методам можно как
через созданные объекты, так и непосредственно из класса:<BR> <BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Колобок'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.total</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">1</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Змей Горыныч'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">Virt_zoo.status()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Всего зверюшек &ndash; 2</SPAN><BR>
<A NAME="2.3"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.3 Использование закрытых атрибутов и методов</H4>
<P>В языке Python используется три вида атрибутов:
<UL CLASS="list">                                         
<LI> открытые &ndash; предназначенные для использования из клиентского кода;   
<LI> закрытые &ndash; предназначенные для использования внутри описания класса и запрещенные
для даступа из клиентского кода (перед именем таких атрибутов ставятся два символа подчеркивания);
<LI> атрибуты, предназначенные для использования внутри описания класса, но разрешенные для
даступа из клиентского кода (перед именем таких атрибутов ставится один символ подчеркивания).
</UL>
<P>С целью использования закрытого атрибута внесем в выше описанный класс
<SPAN CLASS="svoj">Vitt_zoo</SPAN> следующие изменения:
<UL CLASS="list">   
<LI> добавим в описание конструктора класса Virt_zoo() закрытый атрибут __mood, отражающий
настроение созданной зверюшки;
<LI> укажем в методе talk() вывод на экран не только имени зверюшки, но и его настроения.
</UL>
<P> А также удалим из него:
<UL CLASS="list">   
<LI> описание статического атрибута total вместе с изменением его значения в конструкторе класса;
<LI> описание статического метода status().
</UL>
<P CLASS="ba">поскольку они были рассмотрены в <A HREF="#2.2">подразделе 2.2</A>.
После внесенных изменений описание класса выглядит следующим образом:<BR><BR> 
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">Virt_zoo:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:green">'''Виртуальные зверюшки'''</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,name,mood):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Появилась новая зверюшка.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.name=name</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__mood=mood</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">talk</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Привет! Меня зовут '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+self.name+</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'. Чуствую себя '</SPAN>
<SPAN STYLE="font-size:7mm; color:black">+self.__mood)</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Проверим </SPAN>использование закрытого аргумента:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Колобок'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'отлично.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.talk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">
Привет! Меня зовут Колобок. Чуствую себя отлично.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2=Virt_zoo(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Серый волк'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">,</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'голодным.'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Появилась новая зверюшка.</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v2.talk()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">
Привет! Меня зовут Серый волк. Чуствую себя голодным.</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Попытка </SPAN>непосредственного обращения к атрибуту с именем
<SPAN CLASS="svoj">mood</SPAN> или  <SPAN CLASS="svoj">__mood</SPAN> ведет к ошибке:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.mood</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: 'Virt_zoo' object has no attribute 'mood'</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">v1.__mood</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: 'Virt_zoo' object has no attribute '__mood'</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Т.е. объект </SPAN>класса <SPAN CLASS="svoj">Virt_zoo</SPAN> не имеет ни
атрибута <SPAN CLASS="svoj">mood</SPAN>, ни атрибута <SPAN CLASS="svoj">__mood</SPAN>.<BR>
<SPAN CLASS="txt_abz">Тем </SPAN>не менее в языке Python имеется возможность обратиться к закрытому
аргументу из клиентского кода и получить его значение. Для этого необходимо использовать следующую
форму: <SPAN CLASS="svoj">объект._ИмяКласса__ИмяАргумента</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(v1._Virt_zoo__mood)</SPAN><BR>   
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">отлично.</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Аналогично </SPAN>атрибутам в языке Python используется три вида методов:
<UL CLASS="list">                                         
<LI> открытые &ndash; предназначенные для использования из клиентского кода;   
<LI> закрытые &ndash; предназначенные для использования внутри описания класса и запрещенные
для даступа из клиентского кода (перед именем таких методов ставятся два символа подчеркивания);
<LI> методы, предназначенные для использования внутри описания класса, но разрешенные для
даступа из клиентского кода (перед именем таких методов ставится один символ подчеркивания).
</UL>
<P>Рассмотрим небольшой пример создания и использования закрытого метода:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">С:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__private_method</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Это закрытый метод'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">public_method</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#af00af">print</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(</SPAN>
<SPAN STYLE="font-size:7mm; color:green">'Это открытый метод'</SPAN>
<SPAN STYLE="font-size:7mm; color:black">)</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__private_method()</SPAN><BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">c1=C()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">c1.public_method()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Это открытый метод</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Это закрытый метод</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Непосредственное </SPAN>обращение к закрытому методу приводит к ошибке:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">c1.__private_method()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: 'C' object has no attribute 'private_method'</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Так </SPAN>же как и для атрибутов в языке Python имеется возможность
обратиться к закрытому методу из клиентского кода. Для этого необходимо использовать следующую
форму: <SPAN CLASS="svoj">объект._ИмяКласса__ИмяМетода</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">c1._C__private_method()</SPAN><BR>   
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">Это закрытый метод</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Но </SPAN>применять ее (также как и форму доступа к закрытому атрибуту) не
следует.<BR>
<A NAME="2.4"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H4 CLASS="pod">2.4 Управление атрибутами</H4>
<P>Python поддерживает возможность управления доступом к атрибутам класса. Создадим класс
<SPAN CLASS="svoj">D </SPAN>с одним закрытым атрибутом <SPAN CLASS="svoj">__x</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">D</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">None</SPAN><BR><BR>
и создадим объект <SPAN CLASS="svoj">d1 </SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1=D()</SPAN><BR><BR>
<SPAN CLASS="txt_abz">При </SPAN>попытке обратиться к свойству <SPAN CLASS="svoj">x </SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x</SPAN><BR><BR>
вырабатывается исключение:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: 'D' object has no attribute 'x'</SPAN><BR><BR>
Аналогичное сообщение получим при попытке обратиться к атрибуту
<SPAN CLASS="svoj">__x</SPAN>.<BR>
<SPAN CLASS="txt_abz">Для </SPAN>предоставления возможности получить доступ к атрибуту
<SPAN CLASS="svoj">x</SPAN> из пользовательского кода, предствим этот атрибут в виде свойства
класса с разрешением на чтение. Для этого создается метод <SPAN CLASS="svoj">x()</SPAN> с
декоратором <SPAN CLASS="svoj">@property</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">D</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">None</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">property</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">return </SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.__x</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Снова </SPAN>попытаемся обратиться к свойству <SPAN CLASS="svoj">x </SPAN>:
<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1=D()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x</SPAN><BR><BR>
<SPAN CLASS="txt_abz">На </SPAN>этот раз ошибки не возникло. Но на экран ничего не выведено, так
как атрибуту <SPAN CLASS="svoj">x</SPAN> изначально было присвоено значение
<SPAN CLASS="svoj">None</SPAN>. Попробуем задать этому свойству некоторое другое значение: <BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1=D()</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x=7</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">
AttributeError: can't set attribute</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Ошибка </SPAN>о невозможности установки атрибута произошла потому, что
пользователю не было разрешено изменять значения свойства. Чтобы дать ему такую возможность
добавим в класс <SPAN CLASS="svoj">D</SPAN> декоратор <SPAN CLASS="svoj">@x.setter</SPAN> с
методом  <SPAN CLASS="svoj">x()</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">D</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">None</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">property</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">return </SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.__x</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">x.setter</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,value):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=value</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Теперь </SPAN>попытаемся изменить свойство <SPAN CLASS="svoj">x </SPAN> и
определить его новое значение:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1=D()</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x=77</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">77</SPAN><BR>
<SPAN CLASS="txt_abz">Задание </SPAN>нового значения свойству <SPAN CLASS="svoj">x</SPAN> произошло
успешно, а попытка удалить это свойство привела к ошибке:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">del d1.x</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">AttributeError: can't delete attribute</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Чтобы </SPAN>дать возможность пользователю удалить свойство (если это
необходимо), добавим в описание класса еще один декоратор &ndash;
<SPAN CLASS="svoj">@x.deleter</SPAN> и еще один метод <SPAN CLASS="svoj">x()</SPAN>:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">class </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">D</SPAN>
<SPAN STYLE="font-size:7mm; color:black">:</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">__init__</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=</SPAN>
<SPAN STYLE="font-size:7mm; color:#FF8000">None</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">property</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:#ff8000">return </SPAN>
<SPAN STYLE="font-size:7mm; color:black">self.__x</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">x.setter</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self,value):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">self.__x=value</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:black">@</SPAN>
<SPAN STYLE="font-size:7mm; color:#af00af">x.deleter</SPAN><BR>
<SPAN STYLE="margin-left:4.0cm; font-size:7mm; color:#FF8000">def </SPAN>
<SPAN STYLE="font-size:7mm; color:blue">x</SPAN>
<SPAN STYLE="font-size:7mm; color:black">(self):</SPAN><BR>
<SPAN STYLE="margin-left:6.3cm; font-size:7mm; color:black">del self.__x</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Зададим </SPAN>новое значение свойству <SPAN CLASS="svoj">x</SPAN> и
попытаемся удалить это свойство:<BR><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1=D()</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x=125</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:blue">125</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">del d1.x</SPAN><BR>
 <SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:#900090">>>></SPAN>
<SPAN STYLE="font-size:7mm; color:black">d1.x</SPAN><BR>
<SPAN STYLE="margin-left:1.5cm; font-size:7mm; color:red">AttributeError: 'D' object has no
attribute '_D__x'</SPAN><BR><BR>
<SPAN CLASS="txt_abz">Т.е. </SPAN>свойство <SPAN CLASS="svoj">x</SPAN> удалено.
<A NAME="ind"></A>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>

<H3>Индивидуальные задания</H3>
<P>Разработать программу на языке Python, в которой:
<UL CLASS="list">                                           
<LI> создается класс, описывающий поведение объектов, представляющих  (см. колонку "Поведение"
табл. 3) таких персонаажей:
<UL CLASS="list2"> 
<LI> 1 &ndash; пользователей компьютера;
<LI> 2 &ndash; литературных персонажей;
<LI> 3 &ndash; студентов;
<LI> 4 &ndash; героев мультипликации;
<LI> 5 &ndash; исторических персонажей;
<LI> 6 &ndash; персонажей художественных фильмов;
</UL>
<LI> класс должен иметь следулющие специальные методы: __init__(), __str__() и __del__();
<LI> класс должен иметь такие атрибуты и/или методы (см. колонку "Атрибуты/методы"табл. 3):
<UL CLASS="list2"> 
<LI> 1 &ndash; статический метод;
<LI> 2 &ndash; атрибут класса;
<LI> 3 &ndash; метод экземпляра класса;
<LI> 4 &ndash; закрытый атрибут
<LI> 5 &ndash; закрытый метод
</UL>
<LI> осуществляется управление двумя атрибутами класса, для первого устанавливается режим "только
чтение", для второго &ndash; согласно колонке "Управление" табл. 3):
<UL CLASS="list2"> 
<LI> 1 выполняется чтение атрибута и запись в него;
<LI> 2 выполняется чтение и удаление атрибута;
<LI> 3 выполняется чтение, запись и удаление атрибута;
</UL>
<LI> создаются объекты класса и проверяется их работа. 
</UL>
<P><table align="center" width="50%" border cellspacing="0">
<CAPTION ALIGN="top"><p class="ba">Таблица 3 &ndash; Перечень индивидуальных заданий</CAPTION>
<TR><TH>Номер<BR>п/п<TH>Поведение<TH>Атрибуты/<br>методы<TH>Управление
<TR ALIGN=center><TD>1<TD>1<TD>1,3,4<TD>1
<TR ALIGN=center><TD>2<TD>2<TD>2,3,5<TD>2
<TR ALIGN=center><TD>3<TD>3<TD>1,3,5<TD>3
<TR ALIGN=center><TD>4<TD>4<TD>2,3,4<TD>1
<TR ALIGN=center><TD>5<TD>5<TD>1,3,4<TD>2
<TR ALIGN=center><TD>6<TD>6<TD>2,3,5<TD>3
<TR ALIGN=center><TD>7<TD>1<TD>1,3,5<TD>1
<TR ALIGN=center><TD>8<TD>2<TD>2,3,4<TD>2
<TR ALIGN=center><TD>9<TD>3<TD>1,3,4<TD>3
<TR ALIGN=center><TD>10<TD>4<TD>2,3,5<TD>1
<TR ALIGN=center><TD>11<TD>5<TD>1,3,5<TD>2
<TR ALIGN=center><TD>12<TD>6<TD>2,3,4<TD>3
<TR ALIGN=center><TD>13<TD>1<TD>1,3,4<TD>1
<TR ALIGN=center><TD>14<TD>2<TD>2,3,5<TD>2
<TR ALIGN=center><TD>15<TD>3<TD>1,3,5<TD>3
<TR ALIGN=center><TD>16<TD>4<TD>2,3,4<TD>1
<TR ALIGN=center><TD>17<TD>5<TD>1,3,4<TD>2
<TR ALIGN=center><TD>18<TD>6<TD>2,3,5<TD>3
<TR ALIGN=center><TD>19<TD>1<TD>1,3,5<TD>1
<TR ALIGN=center><TD>20<TD>2<TD>2,3,4<TD>2
</table>
<p>&nbsp;<A CLASS="out" HREF="#beg" style="margin-left:80%">Оглавление</A>
